
Exercise 40: Dictionaries, Oh Lovely Dictionaries
Now I have to hurt you with another container you can use, because once you learn this container a massive world of ultra-cool will be yours. It is the most useful container ever: the dictionary.
Python calls them “dicts”, other languages call them, “hashes”. I tend to use both names, but it doesn’t matter. What does matter is what they do when compared to lists. You see, a list lets you do this:
    >>> things = ['a', 'b', 'c', 'd'] >>> print things[1]
b
>>> things[1] = 'z'
>>> print things[1] z
>>> print things ['a', 'z', 'c', 'd'] >>>
 You can use numbers to “index” into a list, meaning you can use numbers to find out what’s in lists. You should know this by now, but what a dict does is let you use anything, not just numbers. Yes, a dict associates one thing to another, no matter what it is. Take a look:
    >>> stuff = {'name': 'Zed', 'age': 36, 'height': 6*12+2} >>> print stuff['name']
Zed
>>> print stuff['age']
36
>>> print stuff['height']
74
>>> stuff['city'] = "San Francisco" >>> print stuff['city']
San Francisco
>>>
 You will see that instead of just numbers we’re using strings to say what we want from the stuff dictionary. We can also put new things into the dictionary with strings. It doesn’t have to be strings
123
 
Learn Python The Hard Way, Release 2.0
though, we can also do this:
     >>> stuff[1] = "Wow"
>>> stuff[2] = "Neato"
>>> print stuff[1]
Wow
>>> print stuff[2]
Neato
>>> print stuff
{'city': 'San Francisco', 2: 'Neato',
    'name': 'Zed', 1: 'Wow', 'age': 36,
    'height': 74}
>>>
 In this one I just used numbers. I could use anything. Well almost but just pretend you can use anything for now.
Of course, a dictionary that you can only put things in is pretty stupid, so here’s how you delete things, with the del keyword:
We’ll now do an exercise that you must study very carefully. I want you to type this exercise in and try to understand what’s going on. It is a very interesting exercise that will hopefully make a big light turn on in your head very soon.
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18 19
    >>> del stuff['city'] >>> del stuff[1]
>>> del stuff[2]
>>> stuff
{'name': 'Zed', 'age': 36, 'height': 74}
>>>
     cities = {'CA': 'San Francisco', 'MI': 'Detroit', 'FL': 'Jacksonville'}
cities['NY'] = 'New York' cities['OR'] = 'Portland'
def find_city(themap, state): if state in themap:
return themap[state] else:
return "Not found." # ok pay attention!
cities['_find'] = find_city
while True:
print "State? (ENTER to quit)", state = raw_input("> ")
  124 Exercise 40: Dictionaries, Oh Lovely Dictionaries
20 21 22 23 24
   Warning: Notice how I use themap instead of map? That’s because Python has a function called map, so if you try to use that you can have problems later.
 What You Should See
1. Go find the Python documentation for dictionaries (a.k.a. dicts, dict) and try to do even more things to them.
2. Find out what you can’t do with dictionaries. A big one is that they do not have order, so try playing with that.
3. Try doing a for-loop over them, and then try the items() function in a for-loop.
Learn Python The Hard Way, Release 2.0
     if not state: break
# this line is the most important ever! study!
city_found = cities['_find'](cities, state) print city_found
     $ python ex40.py
State? (ENTER to quit) > CA San Francisco
State? (ENTER to quit) > FL Jacksonville
State? (ENTER to quit) > O Not found.
State? (ENTER to quit) > OR Portland
State? (ENTER to quit) > VT Not found.
State? (ENTER to quit) >
 Extra Credit
 What You Should See 125
Learn Python The Hard Way, Release 2.0
  126 Exercise 40: Dictionaries, Oh Lovely Dictionaries
Exercise 41: Gothons From Planet Percal #25
Did you figure out the secret of the function in the dict from the last exercise? Can you explain it to yourself? I’ll explain it and you can compare your explanation with mine. Here are the lines of code we are talking about:
Remember that functions can be variables too. The def find_city just makes another variable name in your current module that you can use anywhere. In this code first we are putting the function find_city into the dict cities as ’_find’. This is the same as all the others where we set states to some cities, but in this case it’s actually the function.
Alright, so once we know that find_city is in the dict at _find, that means we can do work with it. The 2nd line of code (used later in the previous exercise) can be broken down like this:
1. Python sees city_found = and knows we want to make a new variable.
2. It then reads cities and finds that variable, it’s a dict.
3. Then there’s [’_find’] which will index into the cities dict and pull out whatever is at _find.
4. Whatisat[’_find’]isourfunctionfind_citysoPythonthenknowsit’sgotafunction,and when it hits ( it does the function call.
5. The parameters cities, state are passed to this function find_city, and it runs because it’s called.
6. find_city then tries to look up states inside cities, and returns what it finds or a message saying it didn’t find anything.
7. Python takes what find_city returned, and finally that is what is assigned to city_found all the way at the beginning.
Here’s a trick. Sometimes these things read better in English if you read the code backwards. This is how I would do it for that same line (remember backwards):
127
    cities['_find'] = find_city
city_found = cities['_find'](cities, state)
  
     1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16
Learn Python The Hard Way, Release 2.0
1. state and city are...
2. passed as parameters to...
3. a function at...
4. ’_find’ inside...
5. the dict cities...
6. and finally assigned to city_found.
Here’s another way to read it, this time “inside-out”.
1. Find the center item of the expression, in this case [’_find’].
2. Go counter-clock-wise and you have a dict cities, so this finds the element _find in cities. 3. That gives us a function. Keep going counter-clock-wise and you get to the parameters.
4. The parameters are passed to the function, and that returns a result. Go counter-clock-wise again. 5. Finally, we are at the city_found = assignment, and we have our end result.
After decades of programming I don’t even think about these three ways to read code. I just glance at it and know what it means. I can even glance at a whole screen of code, and all the bugs and errors jump out at me. That took an incredibly long time and quite a bit more study than is sane. To get that way, I learned these three ways of reading most any programming language:
1. Front to back.
2. Back to front.
3. Counter-clock-wise.
Try them out when you have a difficult statement to figure out.
Now type in your next exercise, then go over it. This one is gonna be fun.
from sys import exit
from random import randint
def death():
quips = ["You died. You kinda suck at this.",
"Nice job, you died ...jackass.",
"Such a luser.",
"I have a small puppy that's better at this."]
print quips[randint(0, len(quips)-1)] exit(1)
def central_corridor():
print "The Gothons of Planet Percal #25 have invaded your ship and destroyed" print "your entire crew. You are the last surviving member and your last"
  128
Exercise 41: Gothons From Planet Percal #25
Learn Python The Hard Way, Release 2.0
17 print "mission is to get the neutron destruct bomb from the Weapons Armory,"
18 print "put it in the bridge, and blow the ship up after getting into an "
19 print "escape pod."
20 print "\n"
21 print "You're running down the central corridor to the Weapons Armory when"
22 print "a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume"
23 print "flowing around his hate filled body. He's blocking the door to the"
24 print "Armory and about to pull a weapon to blast you."
25
26 action = raw_input("> ") 27
28 if action == "shoot!":
29 print "Quick on the draw you yank out your blaster and fire it at the Gothon."
30 print "His clown costume is flowing and moving around his body, which throws"
31 print "off your aim. Your laser hits his costume but misses him entirely. This"
32 print "completely ruins his brand new costume his mother bought him, which"
33 print "makes him fly into an insane rage and blast you repeatedly in the face until"
34 print "you are dead. Then he eats you."
35 return 'death'
36
37 elif action == "dodge!":
38 print "Like a world class boxer you dodge, weave, slip and slide right"
39 print "as the Gothon's blaster cranks a laser past your head."
40 print "In the middle of your artful dodge your foot slips and you"
41 print "bang your head on the metal wall and pass out."
42 print "You wake up shortly after only to die as the Gothon stomps on"
43 print "your head and eats you."
44 return 'death'
45
46 elif action == "tell a joke":
47 print "Lucky for you they made you learn Gothon insults in the academy."
48 print "You tell the one Gothon joke you know:"
49 print "Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr."
50 print "The Gothon stops, tries not to laugh, then busts out laughing and can't move."
51 print "While he's laughing you run up and shoot him square in the head"
52 print "putting him down, then jump through the Weapon Armory door."
53 return 'laser_weapon_armory'
54
55 else:
56 print "DOES NOT COMPUTE!"
57 return 'central_corridor'
58
59 def laser_weapon_armory():
60 print "You do a dive roll into the Weapon Armory, crouch and scan the room"
61 print "for more Gothons that might be hiding. It's dead quiet, too quiet."
62 print "You stand up and run to the far side of the room and find the"
63 print "neutron bomb in its container. There's a keypad lock on the box"
64 print "and you need the code to get the bomb out. If you get the code"
129
       
     65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
100 101 102 103 104 105 106 107 108 109 110 111 112
Learn Python The Hard Way, Release 2.0
print "wrong 10 times then the lock closes forever and you can't" print "get the bomb. The code is 3 digits."
code = "%d%d%d" % (randint(1,9), randint(1,9), randint(1,9)) guess = raw_input("[keypad]> ")
guesses = 0
while guess != code and guesses < 10: print "BZZZZEDDD!"
guesses += 1
guess = raw_input("[keypad]> ")
if guess == code:
print "The container clicks open and the seal breaks, letting gas out." print "You grab the neutron bomb and run as fast as you can to the" print "bridge where you must place it in the right spot."
return 'the_bridge'
else:
print "The lock buzzes one last time and then you hear a sickening" print "melting sound as the mechanism is fused together."
print "You decide to sit there, and finally the Gothons blow up the" print "ship from their ship and you die."
return 'death'
def the_bridge():
print "You burst onto the Bridge with the netron destruct bomb" print "under your arm and surprise 5 Gothons who are trying to" print "take control of the ship. Each of them has an even uglier" print "clown costume than the last. They haven't pulled their" print "weapons out yet, as they see the active bomb under your" print "arm and don't want to set it off."
  130
action = raw_input("> ")
if action == "throw the bomb":
print "In a panic you throw the bomb at the group of Gothons"
print "and make a leap for the door. Right as you drop it a"
print "Gothon shoots you right in the back killing you."
print "As you die you see another Gothon frantically try to disarm" print "the bomb. You die knowing they will probably blow up when" print "it goes off."
return 'death'
elif action == "slowly place the bomb":
print "You point your blaster at the bomb under your arm"
print "and the Gothons put their hands up and start to sweat." print "You inch backward to the door, open it, and then carefully" print "place the bomb on the floor, pointing your blaster at it."
Exercise 41: Gothons From Planet Percal #25
113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160
Learn Python The Hard Way, Release 2.0
     print "You then jump back through the door, punch the close button" print "and blast the lock so the Gothons can't get out."
print "Now that the bomb is placed you run to the escape pod to" print "get off this tin can."
return 'escape_pod' else:
print "DOES NOT COMPUTE!" return "the_bridge"
def escape_pod():
print "You rush through the ship desperately trying to make it to" print "the escape pod before the whole ship explodes. It seems like" print "hardly any Gothons are on the ship, so your run is clear of" print "interference. You get to the chamber with the escape pods, and" print "now need to pick one to take. Some of them could be damaged" print "but you don't have time to look. There's 5 pods, which one" print "do you take?"
good_pod = randint(1,5)
guess = raw_input("[pod #]> ")
if int(guess) != good_pod:
print "You jump into pod %s and hit the eject button." % guess print "The pod escapes out into the void of space, then"
print "implodes as the hull ruptures, crushing your body" print "into jam jelly."
return 'death'
else:
print "You jump into pod %s and hit the eject button." % guess print "The pod easily slides out into space heading to"
print "the planet below. As it flies to the planet, you look" print "back and see your ship implode then explode like a" print "bright star, taking out the Gothon ship at the same" print "time. You won!"
exit(0)
ROOMS = {
'death': death,
'central_corridor': central_corridor, 'laser_weapon_armory': laser_weapon_armory, 'the_bridge': the_bridge,
'escape_pod': escape_pod
}
def runner(map, start):
  131
Learn Python The Hard Way, Release 2.0
     next = start
while True:
room = map[next]
print "\n--------" next = room()
runner(ROOMS, 'central_corridor')
 161 162 163 164 165 166 167 168
It’s a lot of code, but go through it, make sure it works, play it.
What You Should See
Here’s me playing the game.
    $ python ex/ex41.py
--------
The Gothons of Planet Percal #25 have invaded your ship and destroyed
your entire crew.  You are the last surviving member and your last
mission is to get the neutron destruct bomb from the Weapons Armory,
put it in the bridge, and blow the ship up after getting into an
escape pod.
You're running down the central corridor to the Weapons Armory when
a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume flowing around his hate filled body. He's blocking the door to the
Armory and about to pull a weapon to blast you.
> dodge!
Like a world class boxer you dodge, weave, slip and slide right
as the Gothon's blaster cranks a laser past your head.
In the middle of your artful dodge your foot slips and you
bang your head on the metal wall and pass out.
You wake up shortly after only to die as the Gothon stomps on
your head and eats you.
--------
Such a luser.
learnpythehardway $ python ex/ex41.py
--------
The Gothons of Planet Percal #25 have invaded your ship and destroyed
your entire crew.  You are the last surviving member and your last
mission is to get the neutron destruct bomb from the Weapons Armory,
put it in the bridge, and blow the ship up after getting into an
escape pod.
  132 Exercise 41: Gothons From Planet Percal #25
Learn Python The Hard Way, Release 2.0
You're running down the central corridor to the Weapons Armory when
a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume flowing around his hate filled body. He's blocking the door to the
Armory and about to pull a weapon to blast you.
> tell a joke
Lucky for you they made you learn Gothon insults in the academy.
You tell the one Gothon joke you know:
Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr. The Gothon stops, tries not to laugh, then busts out laughing and can't move. While he's laughing you run up and shoot him square in the head
putting him down, then jump through the Weapon Armory door.
--------
You do a dive roll into the Weapon Armory, crouch and scan the room
for more Gothons that might be hiding.  It's dead quiet, too quiet.
You stand up and run to the far side of the room and find the
neutron bomb in its container.  There's a keypad lock on the box
and you need the code to get the bomb out.  If you get the code
wrong 10 times then the lock closes forever and you can't
get the bomb.  The code is 3 digits.
[keypad]> 123
BZZZZEDDD!
[keypad]> 234
BZZZZEDDD!
[keypad]> 345
BZZZZEDDD!
[keypad]> 456
BZZZZEDDD!
[keypad]> 567
BZZZZEDDD!
[keypad]> 678
BZZZZEDDD!
[keypad]> 789
BZZZZEDDD!
[keypad]> 384
BZZZZEDDD!
[keypad]> 764
BZZZZEDDD!
[keypad]> 354
BZZZZEDDD!
[keypad]> 263
The lock buzzes one last time and then you hear a sickening
melting sound as the mechanism is fused together.
You decide to sit there, and finally the Gothons blow up the
ship from their ship and you die.
--------
What You Should See 133
       
Learn Python The Hard Way, Release 2.0
You died.  You kinda suck at this.
Extra Credit
1. Explain how returning the next room works.
2. Add cheat codes to the game so you can get past the more difficult rooms.
3. Instead of having each function print itself, learn about “doc string” style comments. Write the room description as doc comments, and change the runner to print them.
4. Once you have doc comments as the room description, do you need to have the function prompt even? Have the runner prompt the user, and pass that in to each function. Your functions should just be if-statements printing the result and returning the next room.
5. This is actually a small version of something called a “finite state machine”. Read about them. They might not make sense but try anyway.
       134
Exercise 41: Gothons From Planet Percal #25
Exercise 42: Gothons Are Getting Classy
While it’s fun to put functions inside of dictionaries, you’d think there’d be something in Python that does this for you. There is: the class keyword. Using class is how you create an even more awesome “dict with functions” than the one you made in the last exercise. Classes have all sorts of powerful features and uses that I could never go into in this book. Instead, you’ll just use them like they’re fancy dictionaries with functions.
A programming language that uses classes is called “Object Oriented Programming”. This is an old style of programming where you make “things” and you “tell” those things to do work. You’ve been doing a lot of this. A whole lot. You just didn’t know it. Remember when you were doing this:
You were actually using classes. The variable stuff is actually a list class. The ’ ’.join(stuff)iscallingthejoinfunctionofthestring’ ’(justanemptyspace)isalsoaclass,a string class. It’s all classes!
Well, and objects, but let’s just skip that word for now. You’ll learn what those are after you make some classes. How do you make classes? Very similar to how you made the ROOMS dict, but easier:
    stuff = ['Test', 'This', 'Out'] print ' '.join(stuff)
     class TheThing(object): def __init__(self):
self.number = 0
def some_function(self):
print "I got called."
def add_me_up(self, more): self.number += more return self.number
# two different things
a = TheThing()
  135
Learn Python The Hard Way, Release 2.0
     b = TheThing() a.some_function()
b.some_function()
print a.add_me_up(20) print a.add_me_up(20) print b.add_me_up(30) print b.add_me_up(30)
print a.number print b.number
    Warning: Alright, this is where you start learning about “warts”. Python is an old language with lots of really ugly obnoxious pieces that were bad decisions. To cover up these bad decisions they make new bad decisions and then yell at people to adopt the new bad decisions. The phrase class TheThing(object) is an example of a bad decision. I won’t get into it right here, but don’t worry about why your class has to have (object) after its name. Just always type it this way or other Python programmers will yell at you. We’ll get into why later.
 You see that self in the parameters? You know what that is? That’s right, it’s the “extra” parameter that Python creates so you can type a.some_function() and then it will translate that to really be some_function(a). Why use self? Your function has no idea what you are calling any one “instance” of TheThing or another, you just use a generic name self. That way you can write your function and it will always work.
You could actually use another name rather than self but then every Python programmer on the planet would hate you, so don’t. Only jerks change things like that and I taught you better. Be nice to people who have to read what you write because ten years later all code is horrible.
Next, see the __init__ function? That is how you set up a Python class with internal variables. You can set them on self with the . (period) just like I’ll show you here. See also how we then use this in add_me_up() later which lets you add to the self.number you created. Later you can see how we use this to add to our number and print it.
Classes are very powerful, so you should read everything you can about them and play with them. You actually know how to use them, you just have to try it. In fact, I want to play some guitar right now so I’m not going to give you an exercise to type. You’re going to write an exercise using classes.
Here’s how we’d do exercise 41 using classes instead of the thing we created:
1 2 3 4 5 6 7
    from sys import exit
from random import randint
class Game(object):
def __init__(self, start): self.quips = [
  136 Exercise 42: Gothons Are Getting Classy
     8
9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
Learn Python The Hard Way, Release 2.0
"You died. You kinda suck at this.",
"Your mom would be proud. If she were smarter.", "Such a luser.",
"I have a small puppy that's better at this."
]
self.start = start def play(self):
next = self.start
while True:
print "\n--------"
room = getattr(self, next) next = room()
def death(self):
print self.quips[randint(0, len(self.quips)-1)] exit(1)
def central_corridor(self):
print "The Gothons of Planet Percal #25 have invaded your ship and destroyed"
print "your entire crew. You are the last surviving member and your last"
print "mission is to get the neutron destruct bomb from the Weapons Armory,"
print "put it in the bridge, and blow the ship up after getting into an "
print "escape pod."
print "\n"
print "You're running down the central corridor to the Weapons Armory when"
print "a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume" print "flowing around his hate filled body. He's blocking the door to the"
print "Armory and about to pull a weapon to blast you."
action = raw_input("> ")
if action == "shoot!":
print "Quick on the draw you yank out your blaster and fire it at the Gothon."
print "His clown costume is flowing and moving around his body, which throws"
print "off your aim. Your laser hits his costume but misses him entirely. This" print "completely ruins his brand new costume his mother bought him, which"
print "makes him fly into an insane rage and blast you repeatedly in the face until" print "you are dead. Then he eats you."
return 'death'
elif action == "dodge!":
print "Like a world class boxer you dodge, weave, slip and slide right" print "as the Gothon's blaster cranks a laser past your head."
print "In the middle of your artful dodge your foot slips and you" print "bang your head on the metal wall and pass out."
137
  
Learn Python The Hard Way, Release 2.0
     56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
100 101 102 103
138
print "You wake up shortly after only to die as the Gothon stomps on" print "your head and eats you."
return 'death'
elif action == "tell a joke":
print "Lucky for you they made you learn Gothon insults in the academy."
print "You tell the one Gothon joke you know:"
print "Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq g print "The Gothon stops, tries not to laugh, then busts out laughing and can't print "While he's laughing you run up and shoot him square in the head"
print "putting him down, then jump through the Weapon Armory door."
return 'laser_weapon_armory'
else:
print "DOES NOT COMPUTE!" return 'central_corridor'
def laser_weapon_armory(self):
print "You do a dive roll into the Weapon Armory, crouch and scan the room" print "for more Gothons that might be hiding. It's dead quiet, too quiet." print "You stand up and run to the far side of the room and find the"
print "neutron bomb in its container. There's a keypad lock on the box"
print "and you need the code to get the bomb out. If you get the print "wrong 10 times then the lock closes forever and you can't" print "get the bomb. The code is 3 digits."
code = "%d%d%d" % (randint(1,9), randint(1,9), randint(1,9)) guess = raw_input("[keypad]> ")
guesses = 0
while guess != code and guesses < 10: print "BZZZZEDDD!"
guesses += 1
guess = raw_input("[keypad]> ")
code"
if guess == code:
print "The container clicks open and the seal breaks, letting
print "You grab the neutron bomb and run as fast as you can to the" print "bridge where you must place it in the right spot."
return 'the_bridge'
else:
print "The lock buzzes one last time and then you hear a sickening" print "melting sound as the mechanism is fused together."
print "You decide to sit there, and finally the Gothons blow up the" print "ship from their ship and you die."
return 'death'
def the_bridge(self):
gas out."
  Exercise 42: Gothons Are Getting Classy
Learn Python The Hard Way, Release 2.0
104 print "You burst onto the Bridge with the netron destruct bomb"
105 print "under your arm and surprise 5 Gothons who are trying to"
106 print "take control of the ship. Each of them has an even uglier"
107 print "clown costume than the last. They haven't pulled their"
108 print "weapons out yet, as they see the active bomb under your"
109 print "arm and don't want to set it off."
110
111 action = raw_input("> ") 112
113 if action == "throw the bomb":
114 print "In a panic you throw the bomb at the group of Gothons"
115 print "and make a leap for the door. Right as you drop it a"
116 print "Gothon shoots you right in the back killing you."
117 print "As you die you see another Gothon frantically try
118 print "the bomb. You die knowing they will probably blow
119 print "it goes off."
120 return 'death'
121
122 elif action == "slowly place the bomb":
123 print "You point your blaster at the bomb under your arm"
124 print "and the Gothons put their hands up and start to sweat."
125 print "You inch backward to the door, open it, and then carefully"
126 print "place the bomb on the floor, pointing your blaster at it."
127 print "You then jump back through the door, punch the close button"
128 print "and blast the lock so the Gothons can't get out."
129 print "Now that the bomb is placed you run to the escape pod to"
130 print "get off this tin can."
131 return 'escape_pod'
132 else:
133 print "DOES NOT COMPUTE!"
134 return "the_bridge"
135
136 def escape_pod(self):
137 print "You rush through the ship desperately trying to make it to"
138 print "the escape pod before the whole ship explodes. It seems like"
139 print "hardly any Gothons are on the ship, so your run is clear of"
140 print "interference. You get to the chamber with the escape pods, and"
     141 print "now need to pick one to
142 print "but you don't have time
143 print "do you take?"
144
take.  Some of them could be damaged"
to look.  There's 5 pods, which one"
145 good_pod = randint(1,5)
146 guess = raw_input("[pod #]> ")
147 148
149 if int(guess) != good_pod:
150 print "You jump into pod %s and hit the eject button." % guess
151 print "The pod escapes out into the void of space, then"
139
to disarm"
up when"
  
152 153 154 155 156 157 158 159 160 161 162 163 164 165 166
Learn Python The Hard Way, Release 2.0
     print "implodes as the hull ruptures, crushing your body" print "into jam jelly."
return 'death'
else:
print "You jump into pod %s and hit the eject button." % guess print "The pod easily slides out into space heading to"
print "the planet below. As it flies to the planet, you look" print "back and see your ship implode then explode like a" print "bright star, taking out the Gothon ship at the same" print "time. You won!"
exit(0)
a_game = Game("central_corridor") a_game.play()
 What You Should See
The output from this version of the game should be exactly the same as the previous version. In fact you’ll notice that some of the code is nearly the same. Compare this new version of the game with the last one so you understand the changes that were made. Key things to really get are:
1. How you made a class Game(object) and put functions inside it.
2. How __init__ is a special intialization method that sets up important variables.
3. How you added functions to the class by indenting them so they were deeper under the class keyword. This is important so study carefully how indentation creates the class structure.
4. How you indented again to put the contents of the functions under their names.
5. How colons are being used.
6. The concept of self and how it’s used in __init__, play, and death.
7. Go find out what getattr does inside play so that you understand what’s going on with the operation of play. In fact, try doing this by hand inside Python to really get it.
8. How a Game was created at the end and then told to play() and how that got everything started.
Extra Credit
1. Find out what the __dict__ is and figure out how to get at it.
2. Add some rooms to make sure you know how to work with a class.
140 Exercise 42: Gothons Are Getting Classy
 
Learn Python The Hard Way, Release 2.0
3. Create a two-class version of this, where one is the Map and the other is the Engine. Hint: play goes in the Engine.
  Extra Credit 141
Learn Python The Hard Way, Release 2.0
  142 Exercise 42: Gothons Are Getting Classy
Exercise 43: You Make A Game
You need to start learning to feed yourself. Hopefully as you have worked through this book, you have learned that all the information you need is on the internet, you just have to go search for it. The only thing you have been missing are the right words and what to look for when you search. Now you should have a sense of it, so it’s about time you struggled through a big project and tried to get it working.
Here are your requirements:
1. Make a different game from the one I made.
2. Use more than one file, and use import to use them. Make sure you know what that is.
3. Use one class per room and give the classes names that fit their purpose. Like GoldRoom, KoiPondRoom.
4. Your runner will need to know about these rooms, so make a class that runs them and knows about them. There’s plenty of ways to do this, but consider having each room return what room is next or setting a variable of what room is next.
Other than that I leave it to you. Spend a whole week on this and make it the best game you can. Use classes, functions, dicts, lists anything you can to make it nice. The purpose of this lesson is to teach you how to structure classes that need other classes inside other files.
Remember, I’m not telling you exactly how to do this because you have to do this yourself. Go figure it out. Programming is problem solving, and that means trying things, experimenting, failing, scrapping your work, and trying again. When you get stuck, ask for help and show people your code. If they are mean to you, ignore them, focus on the people who are not mean and offer to help. Keep working it and cleaning it until it’s good, then show it some more.
Good luck, and see you in a week with your game.
 143
Learn Python The Hard Way, Release 2.0
  144 Exercise 43: You Make A Game
Exercise 44: Evaluating Your Game
In this exercise you will evaluate the game you just made. Maybe you got part-way through it and you got stuck. Maybe you got it working but just barely. Either way, we’re going to go through a bunch of things you should know now and make sure you covered them in your game. We’re going to study how to properly format a class, common conventions in using classes, and a lot of “textbook” knowledge.
Why would I have you try to do it yourself and then show you how to do it right? From now on in the book I’m going to try to make you self-sufficient. I’ve been holding your hand mostly this whole time, and I can’t do that for much longer. I’m now instead going to give you things to do, have you do them on your own, and then give you ways to improve what you did.
You will struggle at first and probably be very frustrated but stick with it and eventually you will build a mind for solving problems. You will start to find creative solutions to problems rather than just copy solutions out of textbooks.
Function Style
All the other rules I’ve taught you about how to make a function nice apply here, but add these things:
• For various reasons, programmers call functions that are part of classes methods. It’s mostly marketing but just be warned that every time you say “function” they’ll annoyingly correct you and say “method”. If they get too annoying, just ask them to demonstrate the mathematical basis that determines how a “method” is different from a “function” and they’ll shut up.
• Whenyouworkwithclassesmuchofyourtimeisspenttalkingaboutmakingtheclass“dothings”. Instead of naming your functions after what the function does, instead name it as if it’s a com- mand you are giving to the class. Same as pop is saying “Hey list, pop this off.” It isn’t called remove_from_end_of_list because even though that’s what it does, that’s not a command to a list.
• Keep your functions small and simple. For some reason when people start learning about classes they forget this.
145
 
Learn Python The Hard Way, Release 2.0
Class Style
•Your class should use “camel case” like SuperGoldFactory rather than super_gold_factory.
• Try not to do too much in your __init__ functions. It makes them harder to use.
• Your other functions should use “underscore format” so write my_awesome_hair and not
myawesomehair or MyAwesomeHair.
• Be consistent in how you organize your function arguments. If your class has to deal with users, dogs, and cats, keep that order throughout unless it really doesn’t make sense. If you have one functiontakes(dog, cat, user)andtheothertakes(user, cat, dog),it’llbehardto use.
• Trynottousevariablesthatcomefromthemoduleorglobals.Theyshouldbefairlyself-contained.
• A foolish consistency is the hobgoblin of little minds. Consistency is good, but foolishly following some idiotic mantra because everyone else does is bad style. Think for yourself.
• Always, always have class Name(object) format or else you will be in big trouble.
Code Style
• Give your code vertical space so people can read it. You will find some very bad programmers who are able to write reasonable code, but who do not add any spaces. This is bad style in any language because the human eye and brain use space and vertical alignment to scan and separate visual elements. Not having space is the same as giving your code an awesome camouflage paint job.
• If you can’t read it out loud, it’s probably hard to read. If you are having a problem making something easy to use, try reading it out loud. Not only does this force you to slow down and really read it, but it also helps you find difficult passages and things to change for readability.
• Try to do what other people are doing in Python until you find your own style.
• Once you find your own style, do not be a jerk about it. Working with other people’s code is part of being a programmer, and other people have really bad taste. Trust me, you will probably have really bad taste too and not even realize it.
• If you find someone who writes code in a style you like, try writing something that mimics their style.
  146
Exercise 44: Evaluating Your Game
• Thereareprogrammerswhowilltellyouthatyourcodeshouldbereadableenoughthatyoudonot need comments. They’ll then tell you in their most official sounding voice that, “Ergo you should never write comments.” Those programmers are either consultants who get paid more if other people can’t use their code, or incompetents who tend to never work with other people. Ignore them and write comments.
• When you write comments, describe why you are doing what you are doing. The code already says how, but why you did things the way you did is more important.
• When you write doc comments for your functions , make the comments documentation for some- one who will have to use your code. You do not have to go crazy, but a nice little sentence about what someone does with that function helps a lot.
• Finally, while comments are good, too many are bad, and you have to maintain them. Keep your comments relatively short and to the point, and if you change a function, review the comment to make sure it’s still correct.
Evaluate Your Game
I want you now to pretend you are me. Adopt a very stern look, print out your code, and take a red pen and mark every mistake you find. Anything from this exercise and from other things you have known. Once you are done marking your code up, I want you to fix everything you came up with. Then repeat this a couple of times, looking for anything that could be better. Use all the tricks I’ve given you to break your code down into the smallest tiniest little analysis you can.
The purpose of this exercise is to train your attention to detail on classes. Once you are done with this bit of code, find someone else’s code and do the same thing. Go through a printed copy of some part of it and point out all the mistakes and style errors you find. Then fix it and see if your fixes can be done without breaking their program.
I want you to do nothing but evaluate and fix code for the week. Your own code and other people’s. It’ll be pretty hard work, but when you are done your brain will be wired tight like a boxer’s hands.
Learn Python The Hard Way, Release 2.0
 Good Comments
 Good Comments 147
Learn Python The Hard Way, Release 2.0
  148 Exercise 44: Evaluating Your Game
Exercise 45: Is-A, Has-A, Objects, and Classes
An important concept that you have to understand is the difference between a Class and an Object. The problem is, there is no real “difference” between a class and an object. They are actually the same thing at different points in time. I will demonstrate by a Zen koan:
What is the difference between a Fish and a Salmon?
Did that question sort of confuse you? Really sit down and think about it for a minute. I mean, a Fish and a Salmon are different but, wait, they are the same thing right? A Salmon is a kind of Fish, so I mean it’s not different. But at the same time, becase a Salmon is a particular type of Fish and so it’s actually different from all other Fish. That’s what makes it a Salmon and not a Halibut. So a Salmon and a Fish are the same but different. Weird.
This question is confusing because most people do not think about real things this way, but they intuitively understand them. You do not need to think about the difference between a Fish and a Salmon because you know how they are related. You know a Salmon is a kind of Fish and that there are other kinds of Fish without having to understand that.
Let’s take it one step further, let’s say you have a bucket full of 3 Salmon and because you are a nice person, you have decided to name them Frank, Joe, and Mary. Now, think about this question:
What is the difference between Mary and a Salmon?
Again this is a weird question, but it’s a bit easier than the Fish vs. Salmon question. You know that Mary is a Salmon, and so she’s not really different. She’s just a specific “instance” of a Salmon. Joe and Frank are also instances of Salmon. But, what do I mean when I say instance? I mean they were created from some other Salmon and now represent a real thing that has Salmon-like attributes.
Now for the mind bending idea: Fish is a Class, and Salmon is a Class, and Mary is an Object. Think about that for a second. Alright let’s break it down real slow and see if you get it.
A Fish is a Class, meaning it’s not a real thing, but rather a word we attach to instances of things with similar attributes. Got fins? Got gills? Lives in water? Alright it’s probably a Fish.
Someone with a Ph.D. then comes along and says, “No my young friend, this Fish is actually Salmo salar, affectionately known as a Salmon.” This professor has just clarified the Fish further and made a
149
 
Learn Python The Hard Way, Release 2.0
new Class called “Salmon” that has more specific attributes. Longer nose, reddish flesh, big, lives in the ocean or fresh water, tasty? Ok, probably a Salmon.
Finally, a cook comes along and tells the Ph.D., “No, you see this Salmon right here, I’ll call her Mary and I’m going to make a tasty fillet out of her with a nice sauce.” Now you have this instance of a Salmon (which also is an instance of a Fish) named Mary turned into something real that is filling your belly. It has become an Object.
There you have it: Mary is a kind of Salmon that is a kind of Fish. Object is a Class is a Class.
How This Looks In Code
This is a weird concept, but to be very honest you only have to worry about it when you make new classes, and when you use a class. I will show you two tricks to help you figure out whether something is a Class or Object.
First, you need to learn two catch phrases “is-a” and “has-a”. You use the phrase is-a when you talk about objects and classes being related to each other by a class relationship. You use has-a when you talk about objects and classes that are related only because they reference each other.
Now, go through this piece of code and replace each ##?? comment with a replacement comment that says whether the next line represents an is-a or a has-a relationship, and what that relationship is. In the beginning of the code, I’ve laid out a few examples, so you just have to write the remaining ones.
Remember, is-a is the relationship between Fish and Salmon, while has-a is the relationship between Salmon and Gills.
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18 19 20 21
     ## Animal is-a object (yes, sort of confusing) look at the extra credit
class Animal(object): pass
## ??
class Dog(Animal):
def __init__(self, name): ## ??
self.name = name
## ??
class Cat(Animal):
def __init__(self, name): ## ??
self.name = name
## ??
class Person(object):
  150 Exercise 45: Is-A, Has-A, Objects, and Classes
22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
Learn Python The Hard Way, Release 2.0
     ## ??
def __init__(self, name): ## ??
self.name = name
## Person has-a pet of some kind
self.pet = None
class Employee(Person):
def __init__(self, name, salary):
## ?? hmm what is this strange magic? super(Employee, self).__init__(name) ## ??
self.salary = salary
## ??
class Fish(object): pass
## ??
class Salmon(Fish): pass
## ??
class Halibut(Fish): pass
## rover is-a Dog
rover = Dog("Rover") ## ??
satan = Cat("Satan") ## ??
mary = Person("Mary") ## ??
mary.pet = satan ## ??
frank = Employee("Frank", 120000) ## ??
frank.pet = rover ## ??
  How This Looks In Code 151
70 71 72 73 74 75 76
Learn Python The Hard Way, Release 2.0
     flipper = Fish() ## ??
crouse = Salmon()
## ??
harry = Halibut()
 About class Name(object)
RememberhowIwasyellingatyoutoalwaysuseclass Name(object)andIcouldn’ttellyouwhy? Now I can tell you, because you just learned about the difference between a class and an object. I couldn’t tell you until now because you would have just been confused and couldn’t learn to use the technology.
What happened is Python’s original rendition of class was broken in many serious ways. By the time they admitted the fault it was too late, and they had to support it. In order to fix the problem, they needed some “new class” style so that the “old classes” would keep working but you could use the new more correct version.
This is where “class is-a object” comes in. They decided that they would use the word “object”, lower- cased, to be the “class” that you inherit from to make a class. Confusing right? A class inherits from the class named object to make a class but it’s not an object really it’s a class, but do not forget to inherit from object.
Exactly. The choice of one single word meant that I couldn’t teach you about this until now. Now you can try to understand the concept of a class that is an object if you like.
However, I would suggest you do not. Just completely ignore the idea of old style vs. new style classes and assume that Python always requires (object) when you make a class. Save your brain power for something important.
Extra Credit
1. Research why Python added this strange object class, and what that means.
2. Is it possible to use a Class like it’s an Object?
3. Fill out the animals, fish, and people in this exercise with functions that make them do things. See what happens when functions are in a “base class” like Animal vs. in say Dog.
4. Find other people’s code and work out all the is-a and has-a relationships.
5. Makesomenewrelationshipsthatarelistsanddictssoyoucanalsohave“has-many”relationships.
6. Do you think there’s a such thing as a “is-many” relationship? Read about “multiple inheritance”, then avoid it if you can.
 152
Exercise 45: Is-A, Has-A, Objects, and Classes
    $ mkdir -p projects
$ cd projects/
$ mkdir skeleton
$ cd skeleton
$ mkdir bin NAME tests docs
     $ touch NAME/__init__.py
$ touch tests/__init__.py
     try:
from setuptools import setup
except ImportError:
from distutils.core import setup
config = {
'description': 'My Project',
 1 2 3 4 5 6 7
Exercise 46: A Project Skeleton
This will be where you start learning how to setup a good project “skeleton” directory. This skeleton directory will have all the basics you need to get a new project up and running. It will have your project layout, automated tests, modules, and install scripts. When you go to make a new project, just copy this directory to a new name and edit the files to get started.
Skeleton Contents: Linux/OSX
First, create the structure of your skeleton directory with these commands:
I use a directory named projects to store all the various things I’m working on. Inside that directory I have my skeleton directory that I put the basis of my projects into. The directory NAME will be renamed to whatever you are calling your project’s main module when you use the skeleton.
Next we need to setup some initial files:
That creates empty Python module directories we can put our code in. Then we need to create a setup.py file we can use to install our project later if we want:
153
 
Learn Python The Hard Way, Release 2.0
8
9 10 11 12 13 14 15 16 17 18 19
1 2 3 4 5 6 7 8 9
10 11
     'author': 'My Name',
'url': 'URL to get it at.', 'download_url': 'Where to download it.', 'author_email': 'My email.',
'version': '0.1',
'install_requires': ['nose'], 'packages': ['NAME'],
'scripts': [],
'name': 'projectname'
} setup(**config)
 Edit this file so that it has your contact information and is ready to go for when you copy it.
Finally you will want a simple skeleton file for tests named tests/NAME_tests.py:
    from nose.tools import * import NAME
def setup():
print "SETUP!"
def teardown():
print "TEAR DOWN!"
def test_basic(): print "I RAN!"
 Installing Python Packages
Make sure you have some packages installed that makes these things work. Here’s the problem though. You are at a point where it’s difficult for me to help you do that and keep this book sane and clean. There are so many ways to install software on so many computers that I’d have to spend 10 pages walking you through every step, and let me tell you I am a lazy guy.
Rather than tell you how to do it exactly, I’m going to tell you what you should install, and then tell you to figure it out and get it working. This will be really good for you since it will open a whole world of software you can use that other people have released to the world.
Next, install the following python packages:
1. pip from http://pypi.python.org/pypi/pip
2. distribute from http://pypi.python.org/pypi/distribute 3. nose from http://pypi.python.org/pypi/nose/
4. virtualenv from http://pypi.python.org/pypi/virtualenv
154 Exercise 46: A Project Skeleton
 
Learn Python The Hard Way, Release 2.0
Do not just download these packages and install them by hand. Instead see how other people recommend you install these packages and use them for your particular system. The process will be different for most versions of Linux, OSX, and definitely different for Windows.
I am warning you, this will be frustrating. In the business we call this “yak shaving”. Yak shaving is any activity that is mind numblingly irritatingly boring and tedious that you have to do before you can do something else that’s more fun. You want to create cool Python projects, but you can’t do that until you setup a skeleton directory, but you can’t setup a skeleton directory until you install some packages, but you can’t install packages until you install package installers, and you can’t install package installers until you figure out how your system installs software in general, and so on.
Struggle through this anyway. Consider it your trial-by-annoyance to get into the programmer club. Every programmer has to do these annoying tedious tasks before they can do something cool.
Testing Your Setup
After you get all that installed you should be able to do this:
I’ll explain what this nosetests thing is doing in the next exercise, but for now if you do not see that, you probably got something wrong. Make sure you put __init__.py files in your NAME and tests directory and make sure you got tests/NAME_tests.py right.
Using The Skeleton
You are now done with most of your yak shaving. Whenever you want to start a new project, just do this:
1. Make a copy of your skeleton directory. Name it after your new project.
2. Rename (move) the NAME module to be the name of your project or whatever you want to call your root module.
3. Edit your setup.py to have all the information for your project.
4. Rename tests/NAME_tests.py to also have your module name.
5. Double check it’s all working using nosetests again.
6. Start coding.
Testing Your Setup 155
     $ nosetests
. ---------------------------------------------------------------------- Ran 1 test in 0.007s
OK
  
Learn Python The Hard Way, Release 2.0
Required Quiz
This exercise doesn’t have extra credit but a quiz you should complete:
1. Read about how to use all of the things you installed.
2. Read about the setup.py file and all it has to offer. Warning, it is not a very well-written piece of software, so it will be very strange to use.
3. Make a project and start putting code into the module, then get the module working.
4. Put a script in the bin directory that you can run. Read about how you can make a Python script that’s runnable for your system.
5. Mention the bin script you created in your setup.py so that it gets installed.
6. Useyoursetup.pytoinstallyourownmoduleandmakesureitworks,thenusepiptouninstall it.
  156
Exercise 46: A Project Skeleton
    1 2
Exercise 47: Automated Testing
Having to type commands into your game over and over to make sure it’s working is annoying. Wouldn’t it be better to write little pieces of code that test your code? Then when you make a change, or add a new thing to your program, you just “run your tests” and the tests make sure things are still working. These automated tests won’t catch all your bugs, but they will cut down on the time you spend repeatedly typing and running your code.
EveryexerciseafterthisonewillnothaveaWhat You Should Seesection,butinsteaditwillhave aWhat You Should Testsection.Youwillbewritingautomatedtestsforallofyourcodestarting now, and this will hopefully make you an even better programmer.
I won’t try to explain why you should write automated tests. I will only say that, you are trying to be a programmer, and programmers automate boring and tedious tasks. Testing a piece of software is definitely boring and tedious, so you might as well write a little bit of code to do it for you.
That should be all the explanation you need because your reason for writing unit tests is to make your brain stronger. You have gone through this book writing code to do things. Now you are going to take the next leap and write code that knows about other code you have written. This process of writing a test that runs some code you have written forces you to understand clearly what you have just written. It solidifies in your brain exactly what it does and why it works and gives you a new level of attention to detail.
Writing A Test Case
We’re going to take a very simple piece of code and write one simple test. We’re going to base this little test on a new project from your project skeleton.
First, make a ex47 project from your project skeleton. Make sure you do it right and rename the module and get that first tests/ex47_tests.py test file going right. Also make sure nose runs this test file. IMPORTANT make sure you also delete tests/skel_tests.pyc if it’s there.
Next, create a simple file ex47/game.py where you can put the code to test. This will be a very silly little class that we want to test with this code in it:
157
class Room(object):
  
Learn Python The Hard Way, Release 2.0
3 4 5 6 7 8 9
10 11 12
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
     def __init__(self, name, description): self.name = name
self.description = description self.paths = {}
def go(self, direction):
return self.paths.get(direction, None)
def add_paths(self, paths): self.paths.update(paths)
 Once you have that file, change unit test skeleton to this:
    from nose.tools import * from ex47.game import Room
def test_room():
gold = Room("GoldRoom",
                """This room has gold in it you can grab. There's a
door to the north.""") assert_equal(gold.name, "GoldRoom")
assert_equal(gold.paths, {})
def test_room_paths():
center = Room("Center", "Test room in the center.") north = Room("North", "Test room in the north.") south = Room("South", "Test room in the south.")
center.add_paths({'north': north, 'south': south}) assert_equal(center.go('north'), north) assert_equal(center.go('south'), south)
def test_map():
start = Room("Start", "You can go west and down a hole.")
west = Room("Trees", "There are trees here, you can go east.") down = Room("Dungeon", "It's dark down here, you can go up.")
start.add_paths({'west': west, 'down': down}) west.add_paths({'east': start}) down.add_paths({'up': start})
assert_equal(start.go('west'), west) assert_equal(start.go('west').go('east'), start) assert_equal(start.go('down').go('up'), start)
 This file imports the Room class you made in the ex47.game module so that you can do tests on it. There are then a set of tests that are functions starting with test_. Inside each test case there’s a bit of code that makes a Room or a set of Rooms, and then makes sure the rooms work the way you expect
158 Exercise 47: Automated Testing
 
Learn Python The Hard Way, Release 2.0
them to work. It tests out the basic room features, then the paths, then tries out a whole map.
The important functions here are assert_equal which makes sure that variables you have set or paths you have built in a Room are actually what you think they are. If you get the wrong result, then nosetests will print out an error message so you can go figure it out.
Testing Guidelines
Follow these general loose set of guidelines when making your tests:
1. Test files go in tests/ and are named BLAH_tests.py otherwise nosetests won’t run them. This also keeps your tests from clashing with your other code.
2. Write one test file for each module you make.
3. Keep your test cases (functions) short, but do not worry if they are a bit messy. Test cases are usually kind of messy.
4. Even though test cases are messy, try to keep them clean and remove any repetitive code you can. Create helper functions that get rid of duplicate code. You will thank me later when you make a change and then have to change your tests. Duplicated code will make changing your tests more difficult.
5. Finally, do not get too attached to your tests. Sometimes, the best way to redesign something is to just delete it, the tests, and start over.
What You Should See
That’s what you should see if everything is working right. Try causing an error to see what that looks like and then fix it.
Extra Credit
1. Go read about nosetests more, and also read about alternatives. 2. Learn about Python’s “doc tests” and see if you like them better.
Testing Guidelines 159
     ~/projects/simplegame $ nosetests
...
----------------------------------------------------------------------
Ran 3 tests in 0.007s
OK
  
Learn Python The Hard Way, Release 2.0
3. Make your Room more advanced, and then use it to rebuild your game yet again but this time, unit test as you go.
  160
Exercise 47: Automated Testing
Exercise 48: Advanced User Input
Your game probably was coming along great, but I bet how you handled what the user typed was be- coming tedious. Each room needed its own very exact set of phrases that only worked if your player typed them perfectly. What you’d rather have is a device that lets users type phrases in various ways. For example, we’d like to have all of these phrases work the same:
• open door
• open the door
• go THROUGH the door
• punch bear
• Punch The Bear in the FACE
It should be alright for a user to write something a lot like English for your game, and have your game figure out what it means. To do this, we’re going to write a module that does just that. This module will have a few classes that work together to handle use input and convert it into something your game can work with reliably.
In a simple version of English the following elements:
• Words separated by spaces.
• Sentences composed of the words.
• Grammar that structures the sentences into meaning.
That means the best place to start is figuring out how to get words from the user and what kinds of words those are.
Our Game Lexicon
In our game we have to create a Lexicon of words:
• Direction words: north, south, east, west, down, up, left, right, back. • Verbs: go, stop, kill, eat.
 161
Learn Python The Hard Way, Release 2.0
• Stop words: the, in, of, from, at, it
• Nouns: door, bear, princess, cabinet.
• Numbers: any string of 0 through 9 characters.
When we get to nouns, we have a slight problem since each room could have a different set of Nouns, but let’s just pick this small set to work with for now and improve it later.
Breaking Up A Sentence
Once we have our lexicon of words we need a way to break up sentences so that we can figure out what they are. In our case, we’ve defined a sentence as “words separated by spaces”, so we really just need to do this:
That’s really all we’ll worry about for now, but this will work really well for quite a while.
Lexicon Tuples
Once we know how to break up a sentence into words, we just have to go through the list of words and figure out what “type” they are. To do that we’re going to use a handy little Python structure called a “tuple”. A tuple is nothing more than a list that you can’t modify. It’s created by putting data inside two () with a comma, like a list:
This creates a pair of (TYPE, WORD) that lets you look at the word and do things with it.
This is just an example, but that’s basically the end result. You want to take raw input from the user, carve it into words with split, then analyze those words to identify their type, and finally make a sentence out of them.
Scanning Input
Now you are ready to write your scanner. This scanner will take a string of raw input from a user and return a sentence that’s composed of a list of tuples with the (TOKEN, WORD) pairings. If a word isn’t part of the lexicon then it should still return the WORD, but set the TOKEN to an error token. These error tokens will tell the user they messed up.
Here’s where it gets fun. I’m not going to tell you how to do this. Instead I’m going to write a unit test und you are going to write the scanner so that the unit test works.
162 Exercise 48: Advanced User Input
     stuff = raw_input('> ') words = stuff.split()
     first_word = ('direction', 'north') second_word = ('verb', 'go') sentence = [first_word, second_word]
  
Exceptions And Numbers
There is one tiny thing I will help you with first, and that’s converting numbers. In order to do this though, we’re going to cheat and use exceptions. An exception is an error that you get from some function you may have run. What happens is your function “raises” an exception when it encounters an error, then you have to handle that exception. For example, if you type this into python:
That ValueError is an exception that the int() function threw because what you handed int() is not a number. The int() function could have returned a value to tell you it had an error, but since it only returns integers, it’d have a hard time doing that. It can’t return -1 since that’s a number. Instead of trying to figure out what to return when there’s an error, the int() function raises the ValueError exception and you deal with it.
You deal with an exception by using the try and except keywords:
You put the code you want to “try” inside the try block, and then you put the code to run for the error inside the except. In this case, we want to “try” to call int() on something that might be a number. If that has an error, then we “catch” it and return None.
In your scanner that you write, you should use this function to test if something is a number. You should also do it as the last thing you check for before declaring that word an error word.
What You Should Test
Here are the files tests/lexicon_tests.py that you should use:
1 2 3 4 5
Learn Python The Hard Way, Release 2.0
     ~/projects/simplegame $ python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41)
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information. >>> int("hell")
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'hell' >>
     def convert_number(s): try:
return int(s) except ValueError:
return None
     from nose.tools import * from ex48 import lexicon
def test_directions():
  What You Should Test 163
Learn Python The Hard Way, Release 2.0
6 7 8 9
10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
     assert_equal(lexicon.scan("north"), [('direction', 'north')]) result = lexicon.scan("north south east") assert_equal(result, [('direction', 'north'),
('direction', 'south'), ('direction', 'east')])
def test_verbs():
assert_equal(lexicon.scan("go"), [('verb', 'go')]) result = lexicon.scan("go kill eat") assert_equal(result, [('verb', 'go'),
('verb', 'kill'), ('verb', 'eat')])
def test_stops():
assert_equal(lexicon.scan("the"), [('stop', 'the')]) result = lexicon.scan("the in of") assert_equal(result, [('stop', 'the'),
('stop', 'in'), ('stop', 'of')])
def test_nouns():
assert_equal(lexicon.scan("bear"), [('noun', 'bear')]) result = lexicon.scan("bear princess") assert_equal(result, [('noun', 'bear'),
('noun', 'princess')])
def test_numbers():
assert_equal(lexicon.scan("1234"), [('number', 1234)]) result = lexicon.scan("3 91234")
assert_equal(result, [('number', 3),
('number', 91234)])
def test_errors():
assert_equal(lexicon.scan("ASDFADFASDF"), [('error', 'ASDFADFASDF')]) result = lexicon.scan("bear IAS princess")
assert_equal(result, [('noun', 'bear'),
('error', 'IAS'), ('noun', 'princess')])
 Remember that you will want to make a new project with your skeleton, type in this test case (do not copy-paste!) and write your scanner so that the test runs. Focus on the details and make sure everything works right.
164 Exercise 48: Advanced User Input
 
Focus on getting one test working at a time. Keep this simple and just put all the words in your lexicon in lists that are in your lexicon.py module. Do not modify the input list of words, but instead make your own new list with your lexicon tuples in it. Also, use the in keyword with these lexicon lists to check if a word is in the lexicon.
Extra Credit
1. Improve the unit test to make sure you cover more of the lexicon.
2. Add to the lexicon and then update the unit test.
3. Make your scanner handles user input in any capitalization and case. Update the test to make sure this actually works.
4. Find another way to convert the number.
5. My solution was 37 lines long. Is yours longer? Shorter?
Learn Python The Hard Way, Release 2.0
 Design Hints
 Design Hints 165
Learn Python The Hard Way, Release 2.0
  166 Exercise 48: Advanced User Input
Exercise 49: Making Sentences
What we should be able to get from our little game lexicon scanner is a list that looks like this:
    >>> from ex48 import lexicon
>>> print lexicon.scan("go north")
[('verb', 'go'), ('direction', 'north')]
>>> print lexicon.scan("kill the princess")
[('verb', 'kill'), ('stop', 'the'), ('noun', 'princess')]
>>> print lexicon.scan("eat the bear")
[('verb', 'eat'), ('stop', 'the'), ('noun', 'bear')]
>>> print lexicon.scan("open the door and smack the bear in the nose") [('error', 'open'), ('stop', 'the'), ('noun', 'door'), ('error', 'and'), ('error', 'smack'), ('stop', 'the'), ('noun', 'bear'), ('stop', 'in'), ('stop', 'the'), ('error', 'nose')]
>>>
 Now let us turn this into something the game can work with, which would be some kind of Sentence class.
If you remember grade school, a sentence can be a simple structure like: Subject Verb Object
Obviously it gets more complex than that, and you probably did many days of annoying sentence graphs for English class. What we want is to turn the above lists of tuples into a nice Sentence object that has subject, verb, and object.
Match And Peek
To do this we need four tools:
1. A way to loop through the list of tuples. That’s easy.
2. A way to “match” different types of tuples that we expect in our Subject Verb Object setup. 3. A way to “peek” at a potential tuple so we can make some decisions.
4. A way to “skip” things we do not care about, like stop words.
167
 
Learn Python The Hard Way, Release 2.0
We use the peek function to say look at the next element in our tuple list, and then match to take one off and work with it. Let’s take a look at a first peek function:
Very easy. Now for the match function:
     def peek(word_list): if word_list:
word = word_list[0]
return word[0] else:
return None
     def match(word_list, expecting): if word_list:
word = word_list.pop(0)
if word[0] == expecting: return word
else:
return None
else:
return None
 Again, very easy, and finally our skip function:
By now you should be able to figure out what these do. Make sure you understand them.
The Sentence Grammar
With our tools we can now begin to build Sentence objects from our list of tuples. What we do is a process of:
1. Identify the next word with peek.
2. If that word fits in our grammar, we call a function to handle that part of the grammar, say
parse_subject.
3. If it doesn’t, we raise an error, which you will learn about in this lesson.
4. When we’re all done, we should have a Sentence object to work with in our game.
The best way to demonstrate this is to give you the code to read, but here’s where this exercise is different from the previous one: You will write the test for the parser code I give you. Rather than giving you the test so you can write the code, I will give you the code, and you have to write the test.
Here’s the code that I wrote for parsing simple sentences using the ex48.lexicon module:
168 Exercise 49: Making Sentences
    def skip(word_list, word_type):
while peek(word_list) == word_type:
match(word_list, word_type)
  
Learn Python The Hard Way, Release 2.0
     class ParserError(Exception): pass
class Sentence(object):
def __init__(self, subject, verb, object):
# remember we take ('noun','princess') tuples and convert them self.subject = subject[1]
self.verb = verb[1]
self.object = object[1]
def peek(word_list): if word_list:
word = word_list[0]
return word[0] else:
return None
def match(word_list, expecting): if word_list:
word = word_list.pop(0)
if word[0] == expecting: return word
else:
return None
else:
return None
def skip(word_list, word_type):
while peek(word_list) == word_type:
match(word_list, word_type)
def parse_verb(word_list): skip(word_list, 'stop')
if peek(word_list) == 'verb': return match(word_list, 'verb')
else:
raise ParseError("Expected a verb next.")
def parse_object(word_list):
  The Sentence Grammar 169
Learn Python The Hard Way, Release 2.0
skip(word_list, 'stop') next = peek(word_list)
if next == 'noun':
return match(word_list, 'noun')
if next == 'direction':
return match(word_list, 'direction')
else:
raise ParseError("Expected a noun or direction next.")
def parse_subject(word_list, subj): verb = parse_verb(word_list) obj = parse_object(word_list)
return Sentence(subj, verb, obj)
def parse_sentence(word_list): skip(word_list, 'stop')
start = peek(word_list)
if start == 'noun':
subj = match(word_list, 'noun') return parse_subject(word_list, subj)
elif start == 'verb':
# assume the subject is the player then
return parse_subject(word_list, ('noun', 'player'))
else:
raise ParserError("Must start with subject, object, or verb not: %s" % start)
A Word On Exceptions
You briefly learned about exceptions, but not how to raise them. This code demonstrates how to do that with the ParserError at the top. Notice that it uses classes to give it the type of Exception. Also notice the use of raise keyword to raise the exception.
In your tests, you will want to work with these exceptions, which I’ll show you how to do.
What You Should Test
For Exercise 49 is write a complete test that confirms everything in this code is working. That includes making exceptions happen by giving it bad sentences.
170 Exercise 49: Making Sentences
       
Learn Python The Hard Way, Release 2.0
Check for an exception by using the function assert_raises from the nose documentation. Learn how to use this so you can write a test that is expected to fail, which is very important in testing. Learn about this function (and others) by reading the nose documentation.
When you are done, you should know how this bit of code works, and how to write a test for other people’s code even if they do not want you to. Trust me, it’s a very handy skill to have.
Extra Credit
1. Change the parse_ methods and try to put them into a class rather than be just methods. Which design do you like better?
2. Make the parser more error resistant so that you can avoid annoying your users if they type words your lexicon doesn’t understand.
3. Improve the grammar by handling more things like numbers.
4. Think about how you might use this Sentence class in your game to do more fun things with a user’s input.
  Extra Credit 171
Learn Python The Hard Way, Release 2.0
  172 Exercise 49: Making Sentences
Exercise 50: Your First Website
These final three exercises will be very hard and you should take your time with them. In this first one you’ll build a simple web version of one of your games. Before you attempt this exercise you must have completed Exercise 46 successfully and have a working pip installed such that you can install packages and know how to make a skeleton project directory. If you don’t remember how to do this, go back to Exercise 46 and do it all over again.
Installing lpthw.web
Before creating your first web application, you’ll first need to install the “web framework” called lpthw.web. The term “framework” generally means “some package that makes it easier for me to do something”. In the world of web applications, people create “web frameworks” to compensate for the difficult problems they’ve encountered when making their own sites. They share these common solutions in the form of a package you can download to bootstrap your own projects.
In our case, we’ll be using the lpthw.web framework, but there are many, many, many others you can choose from. For now, learn lpthw.web then branch out to another one when you’re ready (or just keep using lpthw.web since it’s good enough).
Using pip install lpthw.web:
    $ sudo pip install lpthw.web [sudo] password for zedshaw: Downloading/unpacking lpthw.web
  Running setup.py egg_info for package lpthw.web
Installing collected packages: lpthw.web
  Running setup.py install for lpthw.web
Successfully installed lpthw.web
Cleaning up...
 This will work on Linux and Mac OSX computers, but on Windows just drop the sudo part of the pip install command and it should work. If not, go back to Exercise 46 and make sure you can do it reliably.
173
 
Learn Python The Hard Way, Release 2.0
    Warning: Other Python programmers will warn you that lpthw.web is just a fork of another web framework called web.py, and that web.py has too much “magic”. If they say this, point out to them that Google App Engine originally used web.py and not a single Python programmer complained that it had too much magic, because they all worked at Google. If it’s good enough for Google, then it’s good enough for you to get started. Then, just get back to learning to code and ignore their goal of indoctrination over education.
 Make A Simple “Hello World” Project
Now you’re going to make an initial very simple “Hello World” web application and project directory using lpthw.web. First, make your project directory:
You’ll be taking the game from Exercise 42 and making it into a web application, so that’s why you’re calling it gothonweb. Before you do that, we need to create the most basic lpthw.web application possible. Put the following code into bin/app.py:
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15
    $ cd projects
$ mkdir gothonweb
$ cd gothonweb
$ mkdir bin gothonweb tests docs templates
$ touch gothonweb/__init__.py
$ touch tests/__init__.py
     import web
urls = (
'/', 'index'
)
app = web.application(urls, globals())
class index:
def GET(self):
greeting = "Hello World" return greeting
if __name__ == "__main__": app.run()
 Then run the application like this:
Finally, use your web browser and go to the URL http://localhost:8080/ and you should see two things. First, in your browser you’ll see Hello, world!. Second, you’ll see your terminal with
174 Exercise 50: Your First Website
    $ python bin/app.py http://0.0.0.0:8080/
  
new output like this:
Learn Python The Hard Way, Release 2.0
     $ python bin/app.py
http://0.0.0.0:8080/
127.0.0.1:59542 - - [13/Jun/2011 11:44:43] "HTTP/1.1 GET /" - 200 OK
127.0.0.1:59542 - - [13/Jun/2011 11:44:43] "HTTP/1.1 GET /favicon.ico" - 404 Not Found
Those are log messages that lpthw.web prints out so you can see that the server is working, and what the browser is doing behind the scenes. The log messages help you debug and figure out when you have problems. For example, it’s saying that your browser tried to get /favicon.ico but that file didn’t existsoitreturned404 Not Foundstatuscode.
I haven’t explained the way any of this web stuff works yet, because I want to get you setup and ready to roll so that I can explain it better in the next two exercises. To accomplish this, I’ll have you break your lpthw.web application in various ways and then restructure it so that you know how it’s setup.
What’s Going On?
Here’s what’s happening when your browser hits your application:
1. Your browser makes a network connection to your own computer, which is called localhost and is a standard way of saying “whatever my own computer is called on the network”. It also uses port 8080.
2. Once it connects, it makes an HTTP request to the bin/app.py application and asks for the / URL, which is commonly the first URL on any website.
3. Insidebin/app.pyyou’vegotalistofURLsandwhatclassestheymatch.Theonlyonewehave is the ’/’, ’index’ mapping. This means that whenever someone goes to / with a browser, lpthw.webwillfindtheclass indexandloadittohandletherequest.
4. Nowthatlpthw.webhasfoundclass indexitcallstheindex.GETmethodonaninstance of that class to actually handle the request. This function runs, and simply returns a string for what lpthw.web should send to the browser.
5. Finally,lpthw.webhashandledtherequestandsendsthisresponsetothebrowserwhichiswhat you are seeing.
Make sure you really understand this. Draw up a diagram of how this information flows from your browser, to lpthw.web, then to index.GET and back to your browser.
Fixing Errors
First, delete line 11 where you assign the greeting variable, then hit refresh in your browser. You should see an error page now that gives you lots of information on how your application just exploded.
What’s Going On? 175
  
Learn Python The Hard Way, Release 2.0
You know that the variable greeting is now missing, but lpthw.web gives you this nice error page to track down exactly where. Do each of the following with this page:
1. LookateachoftheLocal varsoutputs(clickonthem)andseeifyoucanfollowwhatvariables it’s talking about and where they are.
2. Look at the Request Information section and see if it matches anything you’re already fa- miliar with. This is information that your web browser is sending to your gothonweb application. You normally don’t even know that it’s sending this stuff, so now you get to see what it does.
3. Try breaking this simple application in other ways and explore what happens. Don’t forget to also look at the logs being printed into your terminal as lpthw.web will put other stack traces and information there too.
Create Basic Templates
You can break your lpthw.web application, but did you notice that “Hello World” isn’t a very good HTML page? This is a web application, and as such it needs a proper HTML response. To do that you will create a simple template that says “Hello World” in a big green font.
The first step is to create a templates/index.html file that looks like this: $def with (greeting)
   <html>
       <head>
           <title>Gothons Of Planet Percal #25</title>
       </head>
<body>
   $if greeting:
       I just wanted to say <em style="color: green; font-size: 2em;">$greeting</em>.
   $else:
       <em>Hello</em>, world!
   </body>
   </html>
If you know what HTML is then this should look fairly familiar. If not, research HTML and try writing a few web pages by hand so you know how it works. This HTML file however is a template, which means that lpthw.web will fill in “holes” in the text depending on variables you pass in to the template. Every place you see $greeting will be a variable you’ll pass to the template that alters its contents.
To make your bin/app.py do this, you need to add some code to tell lpthw.web where to load the template and to render it. Take that file and change it like this:
1 2
          import web
  176 Exercise 50: Your First Website
3 4 5 6 7 8 9
10 11 12 13 14 15 16 17
Pay close attention to the new render variable, and how I changed the last line of index.GET so it returns render.index() passing in your greeting variable.
Once you have that in place, reload the web page in your browser and you should see a different message in green. You should also be able to do a View Source on the page in your browser to see that it is valid HTML.
This may have flown by you very fast, so let me explain how a template works:
1. In your bin/app.py you’ve added a new variable render which is a
web.template.render object.
2. This render object knows how to load .html files out of the templates/ directory because
you passed that to it as a parameter.
3. Later in your code, when the browser hits the index.GET like before, instead of just returning
the string greeting, you call render.index and pass the greeting to it as a variable.
4. This render.index method is kind of a magic function where the render object sees that you’re asking for index, goes into the templates/ directory, looks for a page named index.html, and then “renders” it, or converts it.
5. In the templates/index.html file you see the beginning definition that says this template takes a greeting parameter, just like a function. Also, just like Python this template is indenta- tion sensitive, so make sure you get them right.
6. Finally, you have the HTML in templates/index.html that looks at the greeting vari- able, and if it’s there, prints one message using the $greeting, or a default message.
To get deeper into this, change the greeting variable and the HTML to see what effect it has. Also create another template named templates/foo.html and render that using render.foo() instead of render.index() like before. This will show you how the name of the function you call on render is just matched to a .html file in templates/.
Create Basic Templates 177
Learn Python The Hard Way, Release 2.0
     urls = (
'/', 'Index'
)
app = web.application(urls, globals()) render = web.template.render('templates/')
class Index(object): def GET(self):
greeting = "Hello World"
return render.index(greeting = greeting)
if __name__ == "__main__": app.run()
  
Learn Python The Hard Way, Release 2.0
Extra Credit
1. Read the documentation at http://webpy.org/ which is the same as the lpthw.web project.
2. Experiment with everything you can find there, including their example code.
3. Read about HTML5 and CSS3 and make some other .html and .css files for practice.
4. If you have a friend who knows Django and is willing to help you, then consider doing Ex 50, 51, and 52 in Django instead to see what that’s like.
  178
Exercise 50: Your First Website
Exercise 51: Getting Input From A Browser
While it’s exciting to see the browser display “Hello World”, it’s even more exciting to let the user submit text to your application from a form. In this exercise we’ll improve our starter web application using forms and storing information about the user into their “session”.
How The Web Works
Time for some boring stuff. You need to understand a bit more about how the web works before you can make a form. This description isn’t complete, but it’s accurate and will help you figure out what might be going wrong with your application. Also, creating forms will be easier if you know what they do.
I’ll start with a simple diagram that shows you the different parts of a web request and how the information flows:
    Your Browser
http://learnpythonthehardway.org/
    (A)
Network Interface
The Internet
Web App's index.GET
(D)
My Server
        (B)
(C)
I’ve labeled the lines with letters so I can walk you through a regular request process:
 179
Learn Python The Hard Way, Release 2.0
1. Youtypeintheurlhttp://learnpythonthehardway.org/intoyourbrowseranditsends therequestoutonline (A)toyourcomputer’snetworkinterface.
2. Your request goes out over the internet on line (B) and then to the remote computer on line (C) where my server accepts the request.
3. Oncemycomputeracceptsit,mywebapplicationgetsitonline (D),andmyPythoncoderuns the index.GET handler.
4. The response comes out of my Python server when I return it, and goes back to your browser overline (D)again.
5. The server running this site takes the response off line (D) then sends it back over the internet online (C).
6. The response from the server then comes off the internet on line (B), and your computer’s networkinterfacehandsittoyourbrowseronline (A).
7. Finally, your browser then displays the response.
In this description there are a few terms you should know so that you have a common vocabulary to work with when talking about your web application:
Browser The software that you’re probably using every day. Most people don’t know what it really does, they just call it “the internet”. Its job is to take addresses (like http://learnpythonthehardway.org) you type into the URL bar, then use that information to make requests to the server at that address.
Address This is normally a URL (Uniform Resource Locator) like http://learnpythonthehardway.org/ and indicates where a browser should go. The first part http indicates the protocol you want to use, in this case “Hyper-Text Transport Protocol”. You can also try ftp://ibiblio.org/ to see how “File Transport Protocol” works. The learnpythonthehardway.org part is the “hostname”, or a human readable address you can remember and which maps to a number called an IP address, similar to a telephone number for a computer on the Internet. Finally, URLs can have a trailing path like the /book/ part of http://learnpythonthehardway.org/book/ which indicates a file or some resource on the server to retrieve with a request. There are many other parts, but those are the main ones.
Connection Once a browser knows what protocol you want to use (http), what server you want to talk to (learnpythonthehardway.org), and what resource on that server to get, it must make a connec- tion. The browser simply asks your Operating System (OS) to open a “port” to the computer, usually port 80. When it works the OS hands back to your program something that works like a file, but is actually sending and receiving bytes over the network wires between your com- puter and the other computer at “learnpythonthehardway.org”. This is also the same thing that happens with http://localhost:8080/ but in this case you’re telling the browser to connect to your own computer (localhost) and use port 8080 rather than the default of 80. You could also do http://learnpythonthehardway.org:80/ and get the same result, except you’re explicitly saying to use port 80 instead of letting it be that by default.
Request Your browser is connected using the address you gave. Now it needs to ask for the resource it wants (or you want) on the remote server. If you gave /book/ at the end of the URL, then
180 Exercise 51: Getting Input From A Browser
  
Learn Python The Hard Way, Release 2.0
you want the file (resource) at /book/, and most servers will use the real file /book/index.html but pretend it doesn’t exist. What the browser does to get this resource is send a request to the server. I won’t get into exactly how it does this, but just understand that it has to send something to query the server for the request. The interesting thing is that these “resources” don’t have to be files. For instance, when the browser in your application asks for something, the server is returning something your Python code generated.
Server The server is the computer at the end of a browser’s connection that knows how to answer your browser’s requests for files/resources. Most web servers just send files, and that’s actually the majority of traffic. But you’re actually building a server in Python that knows how to take requests for resources, and then return strings that you craft using Python. When you do this crafting, you are pretending to be a file to the browser, but really it’s just code. As you can see from Ex. 50, it also doesn’t take much code to create a response.
Response This is the HTML (css, javascript, or images) your server wants to send back to the browser as the answer to the browser’s request. In the case of files, it just reads them off the disk and sends them to the browser, but it wraps the contents of the disk in a special “header” so the browser knows what it’s getting. In the case of your application, you’re still sending the same thing, including the header, but you generate that data on the fly with your Python code.
That is the fastest crash course in how a web browser accesses information on servers on the internet. It should work well enough for you to understand this exercise, but if not, read about it as much as you can until you get it. A really good way to do that is to take the diagram, and break different parts of the web application you did in Exercise 50. If you can break your web application in predictable ways using the diagram, you’ll start to understand how it works.
How Forms Work
The best way to play with forms is to write some code that accepts form data, and then see what you can do. Take your bin/app.py file and make it look like this:
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15
     import web
urls = (
'/hello', 'Index'
)
app = web.application(urls, globals())
render = web.template.render('templates/')
class Index(object): def GET(self):
form = web.input(name="Nobody") greeting = "Hello, %s" % form.name
  How Forms Work 181
     return render.index(greeting = greeting)
if __name__ == "__main__": app.run()
 16 17 18 19 20
Learn Python The Hard Way, Release 2.0
Restart it (hit CTRL-c and then run it again) to make sure it loads again, then with your browser go to http://localhost:8080/hello which should display, “I just wanted to say Hello, Nobody.” Next, change the URL in your browser to http://localhost:8080/hello?name=Frank and you’ll see it say “Hello, Frank.” Finally, change the name=Frank part to be your name. Now it’s saying hello to you.
Let’s break down the changes I made to your script.
1. Instead of just a string for greeting I’m now using web.input to get data from the browser. This function takes a key=value set of defaults, parses the ?name=Frank part of the URL you give it, and then returns a nice object for you to work with that represents those values.
2. I then construct the greeting from the new form.name attribute of the form object, which should be very familiar to you by now.
3. Everything else about the file is the same as before.
You’re also not restricted to just one parameter on the URL. Change this example to give two vari- ables like this: http://localhost:8080/hello?name=Frank&greet=Hola. Then change the code to get form.name and form.greet like this:
greeting = "%s, %s" % (form.greet, form.name)
After that, try the URL. Next, leave out the &greet=Hola part so that you can see the error you get. Since greet doesn’t have a default value in web.input(name="Nobody") then it is a required field. Now go back and make it have a default in the web.input call to see how you fix this. Another thing you can do is set its default to greet=None so that you can check if it exists and then give a better error message, like this:
Creating HTML Forms
Passing the parameters on the URL works, but it’s kind of ugly and not easy to use for regular people. What you really want is a “POST form”, which is a special HTML file that has a <form> tag in it. This form will collect information from the user, then send it to your web application just like you did above.
182 Exercise 51: Getting Input From A Browser
         form = web.input(name="Nobody", greet=None)
if form.greet:
greeting = "%s, %s" % (form.greet, form.name) return render.index(greeting = greeting)
else:
return "ERROR: greet is required."
  
Learn Python The Hard Way, Release 2.0
Let’s make a quick one so you can see how it works. Here’s the new HTML file you need to create, in templates/hello_form.html:
     <html>
    <head>
        <title>Sample Web Form</title>
    </head>
<body>
<h1>Fill Out This Form</h1>
<form action="/hello" method="POST">
    A Greeting: <input type="text" name="greet">
    <br/>
    Your Name: <input type="text" name="name">
    <br/>
    <input type="submit">
</form>
</body>
</html>
 You should then change bin/app.py to look like this:
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18 19 20 21
    import web
urls = (
'/hello', 'Index'
)
app = web.application(urls, globals()) render = web.template.render('templates/')
class Index(object): def GET(self):
return render.hello_form()
def POST(self):
form = web.input(name="Nobody", greet="Hello") greeting = "%s, %s" % (form.greet, form.name) return render.index(greeting = greeting)
if __name__ == "__main__": app.run()
 Once you’ve got those written up, simply restart the web application again and hit it with your browser like before.
This time you’ll get a form asking you for “A Greeting” and “Your Name”. When you hit the Submit Creating HTML Forms 183
 
Learn Python The Hard Way, Release 2.0
button on the form, it will give you the same greeting you normally get, but this time look at the URL in your browser. See how it’s http://localhost:8080/hello even though you sent in parameters.
The part of the hello_form.html file that makes this work is the line with <form action="/hello" method="POST">.Thistellsyourbrowserto:
1. Collect data from the user using the form fields inside the form.
2. Send them to the server using a POST type of request, which is just another browser request that “hides” the form fields.
3. Send that to the /hello URL (as shown in the action="/hello" part).
You can then see how the two <input> tags match the names of the variables in your new code. Also
noticethatinsteadofjustaGETmethodinsideclass index,IhaveanothermethodPOST. How this new application works is:
1. The browser first hits the web application at /hello but it sends a GET, so our index.GET function runs and returns the hello_form.
2. You fill out the form in the browser, and the browser does what the <form> says and sends the data as a POST.
3. The web application then runs the index.POST method rather than the index.GET method to handle this request.
4. This index.POST method then does what it normally does to send back the hello page like before. There’s really nothing new in here, it’s just moved into a new function.
As an exercise, go into the templates/index.html file and add a link back to just /hello so that you can keep filling out the form and seeing the results. Make sure you can explain how this link works and how it’s letting you cycle between templates/index.html and templates/hello_form.html and what’s being run inside this latest Python code.
Creating A Layout Template
When you work on your game in the next Exercise, you’ll need to make a bunch of little HTML pages. Writing a full web page each time will quickly become tedious. Luckily you can create a “layout” template, or a kind of shell that will wrap all your other pages with common headers and footers. Good programmers try to reduce repetition, so layouts are essential for being a good programmer.
Change templates/index.html to be like this: $def with (greeting)
$if greeting:
    I just wanted to say <em style="color: green; font-size: 2em;">$greeting</em>.
     $else:
    <em>Hello</em>, world!
184
Exercise 51: Getting Input From A Browser
  
Learn Python The Hard Way, Release 2.0
Then change templates/hello_form.html to be like this:
     <h1>Fill Out This Form</h1>
<form action="/hello" method="POST">
    A Greeting: <input type="text" name="greet">
    <br/>
    Your Name: <input type="text" name="name">
    <br/>
    <input type="submit">
</form>
 All we’re doing is stripping out the “boilerplate” at the top and the bottom which is always on every page. We’ll put that back into a single templates/layout.html file that handles it for us from now on.
Once you have those changes, create a templates/layout.html file with this in it:
    $def with (content)
<html>
<head>
    <title>Gothons From Planet Percal #25</title>
</head>
<body>
$:content
</body>
</html>
 This file looks like a regular template, except that it’s going to be passed the contents of the other tem- plates and used to wrap them. Anything you put in here doesn’t need to be in the other templates. You should also pay attention to how $:content is written, since it’s a little different from the other tem- plate variables.
The final step is to change the line that makes the render object to be this: render = web.template.render('templates/', base="layout")
Which tells lpthw.web to use the templates/layout.html file as the base template for all the other templates. Restart your application and then try to change the layout in interesting ways, but without changing the other templates.
Writing Automated Tests For Forms
It’s easy to test a web application with your browser by just hitting refresh, but come on, we’re program- mers here. Why do some repetitive task when we can write some code to test our application? What
Writing Automated Tests For Forms 185
      
Learn Python The Hard Way, Release 2.0
you’re going to do next is write a little test for your web application form based on what you learned in Exercise 47. If you don’t remember Exercise 47, read it again.
You need to do a bit of setup to make Python let you load your bin/app.py file for testing. When we get to Exercise 52 you’ll change this, but for now create an empty bin/__init__.py file so Python thinks bin/ is a directory.
I’ve also created a simple little function for lpthw.web that lets you assert things about your web application’s response, aptly named assert_response. Create the file tests/tools.py with these contents:
from nose.tools import * import re
def assert_response(resp, contains=None, matches=None, headers=None, status="200"):
assert status in resp.status, "Expected response %r not in %r" % (status, resp.status)
if status == "200":
assert resp.data, "Response data is empty."
if contains:
assert contains in resp.data, "Response does not contain %r" % contains
if matches:
reg = re.compile(matches)
assert reg.matches(contains), "Response does not match %r" % matches
if headers:
assert_equal(resp.headers, headers)
Once that’s in place you can write your automated test for the last version of the bin/app.py file you created. Create a new file named tests/app_tests.py with this:
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16
     1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18 19
     from nose.tools import *
from bin.app import app
from tests.tools import assert_response
def test_index():
# check that we get a 404 on the / URL resp = app.request("/") assert_response(resp, status="404")
    # test our first GET request to /hello
resp = app.request("/hello") assert_response(resp)
    # make sure default values work for the form
resp = app.request("/hello", method="POST") assert_response(resp, contains="Nobody")
  186 Exercise 51: Getting Input From A Browser
     # test that we get expected values
data = {'name': 'Zed', 'greet': 'Hola'}
resp = app.request("/hello", method="POST", data=data) assert_response(resp, contains="Zed")
 17 18 19 20 21
Learn Python The Hard Way, Release 2.0
Finally, use nosetests to run this test setup and test your web application:
What I’m doing here is I’m actually importing the whole application from the bin/app.py module, then running it manually. The lpthw.web framework has a very simple API for processing requests, which looks like this:
This means you can pass in the URL as the first parameter, then change the method of the request, as wellas what form data you send, including the host and headers. This works without running an actual web server so you can do tests with automated tests and also use your browser to test a running server.
To validate responses from this function, use the assert_response function from tests.tools which has:
assert_response(resp, contains=None, matches=None, headers=None, status="200")
Pass in the response you get from calling app.request then add things you want checked. Use the contains parameter to make sure that the response contains certain values. Use the status parameter to check for certain responses. There’s actually quite a lot of information in this little function so it would be good for you to study it.
In the tests/app_tests.py automated test I’m first making sure the / URL returns a “404 Not Found” response, since it actually doesn’t exist. Then I’m checking that /hello works with both a GET and POST form. Following the test should be fairly simple, even if you might not totally know what’s going on.
Take some time studying this latest application, especially how the automated testing works. Make sure you understand how I imported the application from bin/app.py and ran it directly for the automated test. This is an important trick that will lead to more learning.
Writing Automated Tests For Forms 187
    $ nosetests
. ---------------------------------------------------------------------- Ran 1 test in 0.059s
OK
     app.request(localpart='/', method='GET', data=None, host='0.0.0.0:8080', headers=None, https=False)
       
Learn Python The Hard Way, Release 2.0
Extra Credit
1. Read even more about HTML, and give the simple form a better layout. It helps to draw what you want to do on paper and then implement it with HTML.
2. This one is hard, but try to figure out how you’d do a file upload form so that you can upload an image and save it to the disk.
3. Thisisevenmoremind-numbing,butgofindtheHTTPRFC(whichisthedocumentthatdescribes how HTTP works) and read as much of it as you can. It is really boring, but comes in handy once in a while.
4. This will also be really difficult, but see if you can find someone to help you setup a web server like Apache, Nginx, or thttpd. Try to serve a couple of your .html and .css files with it just to see if you can. Don’t worry if you can’t, web servers kind of suck.
5. Take a break after this and just try making as many different web applications as you can. You should definitely read about sessions in web.py (which is the same as lpthw.web) so you can understand how to keep state for a user.
  188
Exercise 51: Getting Input From A Browser
Exercise 52: The Start Of Your Web Game
We’re coming to the end of the book, and in this exercise I’m going to really challenge you. When you’re done, you’ll be a reasonably competent Python beginner. You’ll still need to go through a few more books and write a couple more projects, but you’ll have the skills to complete them. The only thing in your way will be time, motivation, and resources.
In this exercise, we won’t make a complete game, but instead we’ll make an “engine” that can run the game from Exercise 42 in the browser. This will involve refactoring Exercise 42, mixing in the structure from Exercise 47, adding automated tests, and finally creating a web engine that can run the games.
This exercise will be huge, and I predict you could spend anywhere from a week to months on it before moving on. It’s best to attack it in little chunks and do a bit a night, taking your time to make everything work before moving on.
Refactoring The Exercise 42 Game
You’ve been altering the gothonweb project for two exercises and you’ll do it one more time in this exercise. The skill you’re learning is called “refactoring”, or as I like to call it, “fixing stuff”. Refactoring is a term programmers use to describe the process of taking old code, and changing it to have new features or just to clean it up. You’ve been doing this without even knowing it, as it’s second nature to building software.
What you’ll do in this part is take the ideas from Exercise 47 of a testable “map” of Rooms, and the game from Exercise 42, and combine them together to create a new game structure. It will have the same content, just “refactored” to have a better structure.
First step is to grab the code from ex47/game.py and copy it to gothonweb/map.py and copy tests/ex47_tests.py file to tests/map_tests.py and run nosetests again to make sure it keeps working.
189
  
Learn Python The Hard Way, Release 2.0
Note: From now on I won’t show you the output of a test run, just assume that you should be doing it and it’ll look like the above unless you have an error.
Once you have the code from Exercise 47 copied over, it’s time to refactor it to have the Exercise 42 map in it. I’m going to start off by laying down the basic structure, and then you’ll have an assignment to make the map.py file and the map_tests.py file complete.
First thing to do is lay out the basic structure of the map using the Room class as it is now:
1 class Room(object): 2
      3 def 4
5
6
7
8 def 9
__init__(self, name, description): self.name = name
self.description = description self.paths = {}
go(self, direction):
return self.paths.get(direction, None)
10
11 def 12
13
14
15 central_corridor = Room("Central Corridor",
16 """
17 The Gothons of Planet Percal #25 have invaded your ship and destroyed
18 your entire crew. You are the last surviving member and your last
19 mission is to get the neutron destruct bomb from the Weapons Armory,
20 put it in the bridge, and blow the ship up after getting into an
21 escape pod.
22
23 You're running down the central corridor to the Weapons Armory when
24 a Gothon jumps out, red scaly skin, dark grimy teeth, and evil clown costume
25 flowing around his hate filled body. He's blocking the door to the
26 Armory and about to pull a weapon to blast you.
27 """)
28 29
30 laser_weapon_armory = Room("Laser Weapon Armory",
31 """
32 Lucky for you they made you learn Gothon insults in the academy.
33 You tell the one Gothon joke you know:
34 Lbhe zbgure vf fb sng, jura fur fvgf nebhaq gur ubhfr, fur fvgf nebhaq gur ubhfr.
35 The Gothon stops, tries not to laugh, then busts out laughing and can't move.
36 While he's laughing you run up and shoot him square in the head
37 putting him down, then jump through the Weapon Armory door.
38
39 You
40 for
add_paths(self, paths): self.paths.update(paths)
do a dive roll into the Weapon Armory, crouch and scan the room
more Gothons that might be hiding.  It's dead quiet, too quiet.
  190
Exercise 52: The Start Of Your Web Game
41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
Learn Python The Hard Way, Release 2.0
     You stand up and run to the far side of the room and find the
neutron bomb in its container.  There's a keypad lock on the box
and you need the code to get the bomb out.  If you get the code
wrong 10 times then the lock closes forever and you can't
get the bomb. The code is 3 digits. """)
the_bridge = Room("The Bridge",
"""
The container clicks open and the seal breaks, letting gas out. You grab the neutron bomb and run as fast as you can to the bridge where you must place it in the right spot.
You burst onto the Bridge with the netron destruct bomb
under your arm and surprise 5 Gothons who are trying to
take control of the ship.  Each of them has an even uglier
clown costume than the last.  They haven't pulled their
weapons out yet, as they see the active bomb under your
arm and don't want to set it off.
""")
escape_pod = Room("Escape Pod",
"""
You point your blaster at the bomb under your arm
and the Gothons put their hands up and start to sweat.
You inch backward to the door, open it, and then carefully place the bomb on the floor, pointing your blaster at it. You then jump back through the door, punch the close button and blast the lock so the Gothons can't get out.
Now that the bomb is placed you run to the escape pod to get off this tin can.
You rush through the ship desperately trying to make it to
the escape pod before the whole ship explodes. It seems like hardly any Gothons are on the ship, so your run is clear of interference. You get to the chamber with the escape pods, and now need to pick one to take. Some of them could be damaged but you don't have time to look. There's 5 pods, which one
do you take?
""")
the_end_winner = Room("The End",
"""
You jump into pod 2 and hit the eject button. The pod easily slides out into space heading to
  Refactoring The Exercise 42 Game 191
89 90 91 92 93 94 95 96 97 98 99
100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
Learn Python The Hard Way, Release 2.0
     the planet below.  As it flies to the planet, you look
back and see your ship implode then explode like a
bright star, taking out the Gothon ship at the same
time.  You won!
""")
the_end_loser = Room("The End",
"""
You jump into a random pod and hit the eject button. The pod escapes out into the void of space, then implodes as the hull ruptures, crushing your body into jam jelly.
"""
)
escape_pod.add_paths({ '2': the_end_winner, '*': the_end_loser
})
generic_death = Room("death", "You died.")
the_bridge.add_paths({
'throw the bomb': generic_death, 'slowly place the bomb': escape_pod
})
laser_weapon_armory.add_paths({ '0132': the_bridge,
'*': generic_death
})
central_corridor.add_paths({
'shoot!': generic_death,
'dodge!': generic_death,
'tell a joke': laser_weapon_armory
})
START = central_corridor
 You’ll notice that there are a couple of problems with our Room class and this map:
1.
2.
192
We have to put the text that was in the if-else clauses that got printed before entering a room as part of each room. This means you can’t shuffle the map around which would be nice. You’ll be fixing that up in this exercise.
There are parts in the original game where we ran code that determined things like the bomb’s keypad code, or the right pod. In this game we just pick some defaults and go with it, but later
Exercise 52: The Start Of Your Web Game
 
Learn Python The Hard Way, Release 2.0
you’ll be given extra credit to make this work again.
3. I’ve just made a generic_death ending for all of the bad decisions, which you’ll have to finish for me. You’ll need to go back through and add in all the original endings and make sure they work.
4. I’vegotanewkindoftransitionlabeled"*"thatwillbeusedfora“catch-all”actionintheengine.
Once you’ve got that basically written out, here’s the new automated test tests/map_test.py that
you should have to get yourself started:
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
     from nose.tools import * from gothonweb.map import *
def test_room():
gold = Room("GoldRoom",
                """This room has gold in it you can grab. There's a
door to the north.""") assert_equal(gold.name, "GoldRoom")
assert_equal(gold.paths, {})
def test_room_paths():
center = Room("Center", "Test room in the center.") north = Room("North", "Test room in the north.") south = Room("South", "Test room in the south.")
center.add_paths({'north': north, 'south': south}) assert_equal(center.go('north'), north) assert_equal(center.go('south'), south)
def test_map():
start = Room("Start", "You can go west and down a hole.")
west = Room("Trees", "There are trees here, you can go east.") down = Room("Dungeon", "It's dark down here, you can go up.")
start.add_paths({'west': west, 'down': down}) west.add_paths({'east': start}) down.add_paths({'up': start})
assert_equal(start.go('west'), west) assert_equal(start.go('west').go('east'), start) assert_equal(start.go('down').go('up'), start)
def test_gothon_game_map(): assert_equal(START.go('shoot!'), generic_death) assert_equal(START.go('dodge!'), generic_death)
room = START.go('tell a joke') assert_equal(room, laser_weapon_armory)
  Refactoring The Exercise 42 Game 193
Learn Python The Hard Way, Release 2.0
Your task in this part of the exercise is to complete the map, and make the automated test completely validate the whole map. This includes fixing all the generic_death objects to be real endings. Make sure this works really well and that your test is as complete as possible because we’ll be changing this map later and you’ll use the tests to make sure it keeps working.
Sessions And Tracking Users
At a certain point in your web application you’ll need to keep track of some information and associate it with the user’s browser. The web (because of HTTP) is what we like to call “stateless”, which means each request you make is independent of any other requests being made. If you request page A, put in some data, and click a link to page B, all the data you sent to page A just disappears.
The solution to this is to create a little data store (usually in a database or on the disk) that uses a number unique to each browser to keep track of what that browser was doing. In the little lpthw.web framework it’s fairly easy, and there’s an example showing how it’s done:
import web
web.config.debug = False
urls=(
"/count", "count", "/reset", "reset"
     1
2
3
4
5
6
7 8)
9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
app = web.application(urls, locals())
session = web.session.Session(app, web.session.DiskStore('sessions'), initializer={'count':
class count:
def GET(self):
session.count += 1
return str(session.count)
class reset:
def GET(self):
session.kill() return ""
if __name__ == "__main__": app.run()
To make this work, you need to create a sessions/ directory where the application can put session storage. Do that, run this application and go to /count. Hit refresh and watch the counter go up. Close the browser and it forgets who you are, which is what we want for the game. There’s a way to make the browser remember forever, but that makes testing and development harder. If you then go to /reset, and back to /count you can see your counter reset because you’ve killed the session.
Take the time to understand this code so you can see how the session starts off with the count equal to 194 Exercise 52: The Start Of Your Web Game
  
Learn Python The Hard Way, Release 2.0
0. Also try looking at the files in sessions/ to see if you can open them up. Here’s a Python session where I open up one and decode it:
>>> import pickle
>>> import base64
>>> base64.b64decode(open("sessions/XXXXX").read()) "(dp1\nS'count'\np2\nI1\nsS'ip'\np3\nV127.0.0.1\np4\nsS'session_id'\np5\nS'XXXX'\np6\ns." >>>
>>> x = base64.b64decode(open("sessions/XXXXX").read())
>>>
>>> pickle.loads(x)
{'count': 1, 'ip': u'127.0.0.1', 'session_id': 'XXXXX'}
The sessions are really just dictionaries that get written to disk using pickle and base64 libraries. There are probably as many ways to store and manage sessions as there are web frameworks, so it’s not too important to know how these work. It does help if you need to debug the session or potentially clean them out.
Creating An Engine
You should have your game map working and a good unit test for it. I now want to make a simple little game engine that will run the rooms, collect input from the player, and keep track of where a play is in the game. We’ll be using the sessions you just learned to make a simple game engine that will:
1. Start a new game for new users.
2. Present the room to the user.
3. Take input from the user.
4. Run their input through the game.
5. Display the results and keep going until they die.
To do this, you’re going to take the trusty bin/app.py you’ve been hacking on and create a fully working, session based, game engine. The catch is I’m going to make a very simple one with basic HTML files, and it’ll be up to you to complete it. Here’s the base engine:
1 2 3 4 5 6 7 8 9
10 11
          import web
from gothonweb import map
urls = (
'/game', 'GameEngine', '/', 'Index',
)
app = web.application(urls, globals())
# little hack so that debug mode works with sessions
  Creating An Engine 195
12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
Learn Python The Hard Way, Release 2.0
     if web.config.get('_session') is None:
store = web.session.DiskStore('sessions') session = web.session.Session(app, store,
initializer={'room': None})
web.config._session = session else:
session = web.config._session
render = web.template.render('templates/', base="layout")
class Index(object): def GET(self):
        # this is used to "setup" the session with starting values
session.room = map.START web.seeother("/game")
class GameEngine(object):
def GET(self):
if session.room:
return render.show_room(room=session.room) else:
            # why is there here? do you need it?
return render.you_died() def POST(self):
form = web.input(action=None)
        # there is a bug here, can you fix it?
if session.room and form.action:
session.room = session.room.go(form.action)
web.seeother("/game")
if __name__ == "__main__": app.run()
 There are even more new things in this script, but amazingly it’s an entire web based game engine in a small file. The biggest “hack” in the script are the lines that bring the sessions back, which is needed so that debug mode reloading works. Otherwise, each time you hit refresh the sessions will disappear and the game won’t work.
Before you run bin/app.py you need to change your PYTHONPATH environment variable. Don’t know what that is? I know, it’s kind of dumb you have to learn what this is to run even basic Python programs, but that’s how Python people like things.
In your terminal, type:
196 Exercise 52: The Start Of Your Web Game
 
Learn Python The Hard Way, Release 2.0
     export PYTHONPATH=$PYTHONPATH:.
On Windows do:
set PYTHONPATH=%PYTHONPATH%;.
      You should only have to do it once per shell session, but if you get an import error, then you probably need to do this or you did it wrong.
You should next delete templates/hello_form.html and templates/index.html and create the two templates mentioned in the above code. Here’s a very simple templates/show_room.html:
    $def with (room)
<h1> $room.name </h1>
<pre>
$room.description
</pre>
$if room.name == "death":
    <p><a href="/">Play Again?</a></p>
$else: <p>
    <form action="/game" method="POST">
        - <input type="text" name="action"> <input type="SUBMIT">
</form> </p>
 That is the template to show a room as you travel through the game. Next you need one to tell someone they died in the case that they got to the end of the map on accident, which is templates/you_died.html:
With those in place, you should now be able to do the following:
1. Get the test tests/app_tests.py working again so that you are testing the game. You won’t be able to do much more than a few clicks in the game because of sessions, but you should be able to do some basics.
2. Remove the sessions/* files and make sure you’ve started over.
3. Run the python bin/app.py script and test out the game.
You should be able to refresh and fix the game like normal, and work with the game HTML and engine
until it does all the things you want it to do.
Creating An Engine 197
    <h1>You Died!</h1>
<p>Looks like you bit the dust.</p>
<p><a href="/">Play Again</a></p>
  
Learn Python The Hard Way, Release 2.0
Your Final Exam
Do you feel like this was a huge amount of information thrown at you all at once? Good, I want you to have something to tinker with while you build your skills. To complete this exercise, I’m going to give you a final set of exercises for you to complete on your own. You’ll notice that what you’ve written so far isn’t very well built, it is just a first version of the code. Your task now is to make the game more complete by doing these things:
1. Fix all the bugs I mention in the code, and any that I didn’t mention. If you find new bugs, let me know.
2. Improve all of the automated tests so that you test more of the application and get to a point where you use a test rather than your browser to check the application while you work.
3. Make the HTML look better.
4. Research logins and create a signup system for the application, so people can have logins and high scores.
5. Complete the game map, making it as large and feature complete as possible.
6. Give people a “help” system that lets them ask what they can do at each room in the game.
7. Add any other features you can think of to the game.
8. Create several “maps” and let people choose a game they want to run. Your bin/app.py engine should be able to run any map of rooms you give it, so you can support multiple games.
9. Finally, use what you learned in Exercises 48 and 49 to create a better input processor. You have most of the code necessary, you just need to improve the grammar and hook it up to your input form and the GameEngine.
 Good luck!
 198
Exercise 52: The Start Of Your Web Game
Next Steps
You’re not a programmer quite yet. I like to think of this book as giving you your “programming brown belt”. You know enough to start another book on programming and handle it just fine. This book should have given you the mental tools and attitude you need to go through most Python books and actually learn something. It might even make it easy.
I recommend you continue with http://www.djangobook.com/ and start going through the 2nd Edition of The Django Book. Even if you never plan on doing Python web programming, going through the book will cement your skills in Python using an actual practical activity. It is also a better framework than the lpthw.web you were using, but all of the concepts you’ve learned so far apply to the Django web framework. Just take your time, ask questions, and you’ll get through it.
You could probably start hacking away at some programs right now, and if you have that itch, go ahead. Just understand anything you write will probably suck. That’s alright though, I suck at every program- ming language I first start using. Nobody writes pure perfect gold when they’re a beginner, and anyone who tells you they did is a huge liar.
Finally, remember that this is something you have to do at least a couple hours a night for a while before you can get good. If it helps, while you’re struggling to learn Python every night, I’m hard at work learning to play guitar. I work at it about 2 or 4 hours a day and still practice scales.
Everyone is a beginner at something.
 199
Learn Python The Hard Way, Release 2.0
  200 Next Steps
Advice From An Old Programmer
You’ve finished this book and have decided to continue with programming. Maybe it will be a career for you, or maybe it will be a hobby. You’ll need some advice to make sure you continue on the right path, and get the most enjoyment out of your newly chosen activity.
I’ve been programming for a very long time. So long that it’s incredibly boring to me. At the time that I wrote this book, I knew about 20 programming languages and could learn new ones in about a day to a week depending on how weird they were. Eventually though this just became boring and couldn’t hold my interest anymore. This doesn’t mean I think programming is boring, or that you will think it’s boring, only that I find it uninteresting at this point in my journey.
What I discovered after this journey of learning is that it’s not the languages that matter but what you do with them. Actually, I always knew that, but I’d get distracted by the languages and forget it periodically. Now I never forget it, and neither should you.
Which programming language you learn and use doesn’t matter. Do not get sucked into the religion surrounding programming languages as that will only blind you to their true purpose of being your tool for doing interesting things.
Programming as an intellectual activity is the only art form that allows you to create interactive art. You can create projects that other people can play with, and you can talk to them indirectly. No other art form is quite this interactive. Movies flow to the audience in one direction. Paintings do not move. Code goes both ways.
Programming as a profession is only moderately interesting. It can be a good job, but you could make about the same money and be happier running a fast food joint. You’re much better off using code as your secret weapon in another profession.
People who can code in the world of technology companies are a dime a dozen and get no respect. People who can code in biology, medicine, government, sociology, physics, history, and mathematics are respected and can do amazing things to advance those disciplines.
Of course, all of this advice is pointless. If you liked learning to write software with this book, you should try to use it to improve your life any way you can. Go out and explore this weird wonderful new intellectual pursuit that barely anyone in the last 50 years has been able to explore. Might as well enjoy it while you can.
Finally, I’ll say that learning to create software changes you and makes you different. Not better or worse,
201
 
Learn Python The Hard Way, Release 2.0
just different. You may find that people treat you harshly because you can create software, maybe using words like “nerd”. Maybe you’ll find that because you can dissect their logic that they hate arguing with you. You may even find that simply knowing how a computer works makes you annoying and weird to them.
To this I have one just piece of advice: they can go to hell. The world needs more weird people who know how things work and who love to figure it all out. When they treat you like this, just remember that this is your journey, not theirs. Being different is not a crime, and people who tell you it is are just jealous that you’ve picked up a skill they never in their wildest dreams could acquire.
You can code. They cannot. That is pretty damn cool.
  202 Advice From An Old Programmer
