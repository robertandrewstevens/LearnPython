
Exercise 18: Names, Variables, Code, Functions
Big title right? I am about to introduce you to the function! Dum dum dah! Every programmer will go on and on about functions and all the different ideas about how they work and what they do, but I will give you the simplest explanation you can use right now.
Functions do three things:
1. They name pieces of code the way variables name strings and numbers.
2. They take arguments the way your scripts take argv.
3. Using #1 and #2 they let you make your own “mini scripts” or “tiny commands”.
You can create a function by using the word def in Python. I’m going to have you make four different functions that work like your scripts, and then show you how each one is related.
    # this one is like your scripts with argv
def print_two(*args):
arg1, arg2 = args
print "arg1: %r, arg2: %r" % (arg1, arg2)
# ok, that *args is actually pointless, we can just do this
def print_two_again(arg1, arg2):
print "arg1: %r, arg2: %r" % (arg1, arg2)
# this just takes one argument
def print_one(arg1):
print "arg1: %r" % arg1
# this one takes no arguments
def print_none():
print "I got nothin'."
print_two("Zed","Shaw") print_two_again("Zed","Shaw")
  55
     21 22
Learn Python The Hard Way, Release 2.0
Let’s break down the first function, print_two which is the most similar to what you already know from making scripts:
1. First we tell Python we want to make a function using def for “define”.
2. Onthesamelineasdefwethengivethefunctionaname,inthiscasewejustcalledit“print_two” but it could be “peanuts” too. It doesn’t matter, except that your function should have a short name that says what it does.
3. Then we tell it we want *args (asterisk args) which is a lot like your argv parameter but for functions. This has to go inside () parenthesis to work.
4. Then we end this line with a : colon, and start indenting.
5. After the colon all the lines that are indented 4 spaces will become attached to this name, print_two. Our first indented line is one that unpacks the arguments the same as with your scripts.
6. To demonstrate how it works we print these arguments out, just like we would in a script.
Now, the problem with print_two is that it’s not the easiest way to make a function. In Python we can skip the whole unpacking args and just use the names we want right inside (). That’s what print_two_again does.
After that you have an example of how you make a function that takes one argument in print_one. Finally you have a function that has no arguments in print_none.
What You Should See
If you run the above script you should see:
Right away you can see how a function works. Notice that you used your functions the way you use things like exists, open, and other “commands”. In fact, I’ve been tricking you because in Python
56 Exercise 18: Names, Variables, Code, Functions
print_one("First!") print_none()
    Warning: Thisisveryimportant.Donotgetdiscouragedrightnowifthisdoesn’tquitemakesense. We’re going to do a few exercises linking functions to your scripts and show you how to make more. For now just keep thinking “mini script” when I say “function” and keep playing with them.
     $ python ex18.py
arg1: 'Zed', arg2: 'Shaw' arg1: 'Zed', arg2: 'Shaw' arg1: 'First!'
I got nothin'.
$
  
Learn Python The Hard Way, Release 2.0
those “commands” are just functions. This means you can make your own commands and use them in your scripts too.
Extra Credit
Write out a function checklist for later exercises. Write these on an index card and keep it by you while you complete the rest of these exercises or until you feel you do not need it:
1. Did you start your function definition with def?
2. Does your function name have only characters and _ (underscore) characters?
3. Did you put an open parenthesis ( right after the function name?
4. Did you put your arguments after the parenthesis ( separated by commas?
5. Did you make each argument unique (meaning no duplicated names).
6. Did you put a close parenthesis and a colon ): after the arguments?
7. Did you indent all lines of code you want in the function 4 spaces? No more, no less.
8. Did you “end” your function by going back to writing with no indent (dedenting we call it)?
And when you run (aka “use” or “call”) a function, check these things:
1. Did you call/use/run this function by typing its name?
2. Did you put ( character after the name to run it?
3. Did you put the values you want into the parenthesis separated by commas? 4. Did you end the function call with a ) character.
Use these two checklists on the remaining lessons until you do not need them anymore. Finally, repeat this a few times:
“To ‘run’, ‘call’, or ‘use’ a function all mean the same thing.”
  Extra Credit 57
Learn Python The Hard Way, Release 2.0
  58 Exercise 18: Names, Variables, Code, Functions